package automation

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	uuid "github.com/satori/go.uuid"
	"io/ioutil"
	"net/http"
)

// SoftwareUpdateConfigurationRunsClient is the automation Client
type SoftwareUpdateConfigurationRunsClient struct {
	ManagementClient
}

// NewSoftwareUpdateConfigurationRunsClient creates an instance of the SoftwareUpdateConfigurationRunsClient client.
func NewSoftwareUpdateConfigurationRunsClient(p pipeline.Pipeline) SoftwareUpdateConfigurationRunsClient {
	return SoftwareUpdateConfigurationRunsClient{NewManagementClient(p)}
}

// GetByID get a single software update configuration Run by Id.
//
// softwareUpdateConfigurationRunID is the Id of the software update configuration run.
func (client SoftwareUpdateConfigurationRunsClient) GetByID(ctx context.Context, softwareUpdateConfigurationRunID uuid.UUID) (*SoftwareUpdateConfigurationRun, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.getByIDPreparer(softwareUpdateConfigurationRunID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getByIDResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*SoftwareUpdateConfigurationRun), err
}

// getByIDPreparer prepares the GetByID request.
func (client SoftwareUpdateConfigurationRunsClient) getByIDPreparer(softwareUpdateConfigurationRunID uuid.UUID) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns/{softwareUpdateConfigurationRunId}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	return req, nil
}

// getByIDResponder handles the response to the GetByID request.
func (client SoftwareUpdateConfigurationRunsClient) getByIDResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &SoftwareUpdateConfigurationRun{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List return list of software update configuration runs
//
// filter is the filter to apply on the operation. You can use the following filters: 'properties/osType',
// 'properties/status', 'properties/startTime', and 'properties/softwareUpdateConfiguration/name' skip is number of
// entries you skip before returning results top is maximum number of entries returned in the results collection
func (client SoftwareUpdateConfigurationRunsClient) List(ctx context.Context, filter *string, skip *string, top *string) (*SoftwareUpdateConfigurationRunListResult, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.listPreparer(filter, skip, top)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*SoftwareUpdateConfigurationRunListResult), err
}

// listPreparer prepares the List request.
func (client SoftwareUpdateConfigurationRunsClient) listPreparer(filter *string, skip *string, top *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if skip != nil {
		params.Set("$skip", *skip)
	}
	if top != nil {
		params.Set("$top", *top)
	}
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	return req, nil
}

// listResponder handles the response to the List request.
func (client SoftwareUpdateConfigurationRunsClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &SoftwareUpdateConfigurationRunListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
