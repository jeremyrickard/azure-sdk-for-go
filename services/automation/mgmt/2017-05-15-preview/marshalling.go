package automation

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type statistics struct {
	CounterProperty *string      `json:"counterProperty,omitempty"`
	CounterValue    *int64       `json:"counterValue,omitempty"`
	StartTime       *timeRFC3339 `json:"startTime,omitempty"`
	EndTime         *timeRFC3339 `json:"endTime,omitempty"`
	ID              *string      `json:"id,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Statistics.
func (s Statistics) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(&s))
	return e.EncodeElement(*s2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Statistics.
func (s *Statistics) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(s))
	return d.DecodeElement(s2, &start)
}

// internal type used for marshalling
type runbookDraft struct {
	InEdit           *bool                       `json:"inEdit,omitempty"`
	DraftContentLink *ContentLink                `json:"draftContentLink,omitempty"`
	CreationTime     *timeRFC3339                `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339                `json:"lastModifiedTime,omitempty"`
	Parameters       map[string]RunbookParameter `json:"parameters,omitempty"`
	OutputTypes      []string                    `json:"outputTypes,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for RunbookDraft.
func (rd RunbookDraft) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*RunbookDraft)(nil)).Elem().Size() != reflect.TypeOf((*runbookDraft)(nil)).Elem().Size() {
		panic("size mismatch between RunbookDraft and runbookDraft")
	}
	rd2 := (*runbookDraft)(unsafe.Pointer(&rd))
	return e.EncodeElement(*rd2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for RunbookDraft.
func (rd *RunbookDraft) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*RunbookDraft)(nil)).Elem().Size() != reflect.TypeOf((*runbookDraft)(nil)).Elem().Size() {
		panic("size mismatch between RunbookDraft and runbookDraft")
	}
	rd2 := (*runbookDraft)(unsafe.Pointer(rd))
	return d.DecodeElement(rd2, &start)
}

// internal type used for marshalling
type runbookProperties struct {
	RunbookType        RunbookTypeEnumType          `json:"runbookType,omitempty"`
	PublishContentLink *ContentLink                 `json:"publishContentLink,omitempty"`
	State              RunbookStateType             `json:"state,omitempty"`
	LogVerbose         *bool                        `json:"logVerbose,omitempty"`
	LogProgress        *bool                        `json:"logProgress,omitempty"`
	LogActivityTrace   *int32                       `json:"logActivityTrace,omitempty"`
	JobCount           *int32                       `json:"jobCount,omitempty"`
	Parameters         map[string]RunbookParameter  `json:"parameters,omitempty"`
	OutputTypes        []string                     `json:"outputTypes,omitempty"`
	Draft              *RunbookDraft                `json:"draft,omitempty"`
	ProvisioningState  RunbookProvisioningStateType `json:"provisioningState,omitempty"`
	LastModifiedBy     *string                      `json:"lastModifiedBy,omitempty"`
	CreationTime       *timeRFC3339                 `json:"creationTime,omitempty"`
	LastModifiedTime   *timeRFC3339                 `json:"lastModifiedTime,omitempty"`
	Description        *string                      `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for RunbookProperties.
func (rp RunbookProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*RunbookProperties)(nil)).Elem().Size() != reflect.TypeOf((*runbookProperties)(nil)).Elem().Size() {
		panic("size mismatch between RunbookProperties and runbookProperties")
	}
	rp2 := (*runbookProperties)(unsafe.Pointer(&rp))
	return e.EncodeElement(*rp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for RunbookProperties.
func (rp *RunbookProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*RunbookProperties)(nil)).Elem().Size() != reflect.TypeOf((*runbookProperties)(nil)).Elem().Size() {
		panic("size mismatch between RunbookProperties and runbookProperties")
	}
	rp2 := (*runbookProperties)(unsafe.Pointer(rp))
	return d.DecodeElement(rp2, &start)
}

// internal type used for marshalling
type moduleProperties struct {
	IsGlobal          *bool                       `json:"isGlobal,omitempty"`
	Version           *string                     `json:"version,omitempty"`
	SizeInBytes       *int64                      `json:"sizeInBytes,omitempty"`
	ActivityCount     *int32                      `json:"activityCount,omitempty"`
	ProvisioningState ModuleProvisioningStateType `json:"provisioningState,omitempty"`
	ContentLink       *ContentLink                `json:"contentLink,omitempty"`
	Error             *ModuleErrorInfo            `json:"error,omitempty"`
	CreationTime      *timeRFC3339                `json:"creationTime,omitempty"`
	LastModifiedTime  *timeRFC3339                `json:"lastModifiedTime,omitempty"`
	Description       *string                     `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ModuleProperties.
func (mp ModuleProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ModuleProperties)(nil)).Elem().Size() != reflect.TypeOf((*moduleProperties)(nil)).Elem().Size() {
		panic("size mismatch between ModuleProperties and moduleProperties")
	}
	mp2 := (*moduleProperties)(unsafe.Pointer(&mp))
	return e.EncodeElement(*mp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ModuleProperties.
func (mp *ModuleProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ModuleProperties)(nil)).Elem().Size() != reflect.TypeOf((*moduleProperties)(nil)).Elem().Size() {
		panic("size mismatch between ModuleProperties and moduleProperties")
	}
	mp2 := (*moduleProperties)(unsafe.Pointer(mp))
	return d.DecodeElement(mp2, &start)
}

// internal type used for marshalling
type dscNode struct {
	ID                *string                                      `json:"id,omitempty"`
	Name              *string                                      `json:"name,omitempty"`
	Type              *string                                      `json:"type,omitempty"`
	Location          string                                       `json:"location,omitempty"`
	Tags              map[string]string                            `json:"tags,omitempty"`
	LastSeen          *timeRFC3339                                 `json:"lastSeen,omitempty"`
	RegistrationTime  *timeRFC3339                                 `json:"registrationTime,omitempty"`
	IP                *string                                      `json:"ip,omitempty"`
	AccountID         *string                                      `json:"accountId,omitempty"`
	NodeConfiguration *DscNodeConfigurationAssociationProperty     `json:"nodeConfiguration,omitempty"`
	Status            *string                                      `json:"status,omitempty"`
	NodeID            *string                                      `json:"nodeId,omitempty"`
	Etag              *string                                      `json:"etag,omitempty"`
	ExtensionHandler  []DscNodeExtensionHandlerAssociationProperty `json:"extensionHandler,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscNode.
func (dn DscNode) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNode)(nil)).Elem().Size() != reflect.TypeOf((*dscNode)(nil)).Elem().Size() {
		panic("size mismatch between DscNode and dscNode")
	}
	dn2 := (*dscNode)(unsafe.Pointer(&dn))
	return e.EncodeElement(*dn2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscNode.
func (dn *DscNode) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNode)(nil)).Elem().Size() != reflect.TypeOf((*dscNode)(nil)).Elem().Size() {
		panic("size mismatch between DscNode and dscNode")
	}
	dn2 := (*dscNode)(unsafe.Pointer(dn))
	return d.DecodeElement(dn2, &start)
}

// internal type used for marshalling
type dscConfigurationProperties struct {
	ProvisioningState DscConfigurationProvisioningStateType `json:"provisioningState,omitempty"`
	JobCount          *int32                                `json:"jobCount,omitempty"`
	Parameters        map[string]DscConfigurationParameter  `json:"parameters,omitempty"`
	Source            *ContentSource                        `json:"source,omitempty"`
	State             DscConfigurationStateType             `json:"state,omitempty"`
	LogVerbose        *bool                                 `json:"logVerbose,omitempty"`
	CreationTime      *timeRFC3339                          `json:"creationTime,omitempty"`
	LastModifiedTime  *timeRFC3339                          `json:"lastModifiedTime,omitempty"`
	Description       *string                               `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscConfigurationProperties.
func (dcp DscConfigurationProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscConfigurationProperties)(nil)).Elem().Size() != reflect.TypeOf((*dscConfigurationProperties)(nil)).Elem().Size() {
		panic("size mismatch between DscConfigurationProperties and dscConfigurationProperties")
	}
	dcp2 := (*dscConfigurationProperties)(unsafe.Pointer(&dcp))
	return e.EncodeElement(*dcp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscConfigurationProperties.
func (dcp *DscConfigurationProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscConfigurationProperties)(nil)).Elem().Size() != reflect.TypeOf((*dscConfigurationProperties)(nil)).Elem().Size() {
		panic("size mismatch between DscConfigurationProperties and dscConfigurationProperties")
	}
	dcp2 := (*dscConfigurationProperties)(unsafe.Pointer(dcp))
	return d.DecodeElement(dcp2, &start)
}

// internal type used for marshalling
type accountProperties struct {
	Sku              *Sku             `json:"sku,omitempty"`
	LastModifiedBy   *string          `json:"lastModifiedBy,omitempty"`
	State            AccountStateType `json:"state,omitempty"`
	CreationTime     *timeRFC3339     `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339     `json:"lastModifiedTime,omitempty"`
	Description      *string          `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for AccountProperties.
func (ap AccountProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*AccountProperties)(nil)).Elem().Size() != reflect.TypeOf((*accountProperties)(nil)).Elem().Size() {
		panic("size mismatch between AccountProperties and accountProperties")
	}
	ap2 := (*accountProperties)(unsafe.Pointer(&ap))
	return e.EncodeElement(*ap2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for AccountProperties.
func (ap *AccountProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*AccountProperties)(nil)).Elem().Size() != reflect.TypeOf((*accountProperties)(nil)).Elem().Size() {
		panic("size mismatch between AccountProperties and accountProperties")
	}
	ap2 := (*accountProperties)(unsafe.Pointer(ap))
	return d.DecodeElement(ap2, &start)
}

// internal type used for marshalling
type certificateProperties struct {
	Thumbprint       *string      `json:"thumbprint,omitempty"`
	ExpiryTime       *timeRFC3339 `json:"expiryTime,omitempty"`
	IsExportable     *bool        `json:"isExportable,omitempty"`
	CreationTime     *timeRFC3339 `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339 `json:"lastModifiedTime,omitempty"`
	Description      *string      `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for CertificateProperties.
func (cp CertificateProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*CertificateProperties)(nil)).Elem().Size() != reflect.TypeOf((*certificateProperties)(nil)).Elem().Size() {
		panic("size mismatch between CertificateProperties and certificateProperties")
	}
	cp2 := (*certificateProperties)(unsafe.Pointer(&cp))
	return e.EncodeElement(*cp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for CertificateProperties.
func (cp *CertificateProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*CertificateProperties)(nil)).Elem().Size() != reflect.TypeOf((*certificateProperties)(nil)).Elem().Size() {
		panic("size mismatch between CertificateProperties and certificateProperties")
	}
	cp2 := (*certificateProperties)(unsafe.Pointer(cp))
	return d.DecodeElement(cp2, &start)
}

// internal type used for marshalling
type connectionProperties struct {
	ConnectionType        *ConnectionTypeAssociationProperty `json:"connectionType,omitempty"`
	FieldDefinitionValues map[string]string                  `json:"fieldDefinitionValues,omitempty"`
	CreationTime          *timeRFC3339                       `json:"creationTime,omitempty"`
	LastModifiedTime      *timeRFC3339                       `json:"lastModifiedTime,omitempty"`
	Description           *string                            `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ConnectionProperties.
func (cp ConnectionProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ConnectionProperties)(nil)).Elem().Size() != reflect.TypeOf((*connectionProperties)(nil)).Elem().Size() {
		panic("size mismatch between ConnectionProperties and connectionProperties")
	}
	cp2 := (*connectionProperties)(unsafe.Pointer(&cp))
	return e.EncodeElement(*cp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ConnectionProperties.
func (cp *ConnectionProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ConnectionProperties)(nil)).Elem().Size() != reflect.TypeOf((*connectionProperties)(nil)).Elem().Size() {
		panic("size mismatch between ConnectionProperties and connectionProperties")
	}
	cp2 := (*connectionProperties)(unsafe.Pointer(cp))
	return d.DecodeElement(cp2, &start)
}

// internal type used for marshalling
type connectionTypeProperties struct {
	IsGlobal         *bool                      `json:"isGlobal,omitempty"`
	FieldDefinitions map[string]FieldDefinition `json:"fieldDefinitions,omitempty"`
	CreationTime     *timeRFC3339               `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339               `json:"lastModifiedTime,omitempty"`
	Description      *string                    `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ConnectionTypeProperties.
func (ctp ConnectionTypeProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ConnectionTypeProperties)(nil)).Elem().Size() != reflect.TypeOf((*connectionTypeProperties)(nil)).Elem().Size() {
		panic("size mismatch between ConnectionTypeProperties and connectionTypeProperties")
	}
	ctp2 := (*connectionTypeProperties)(unsafe.Pointer(&ctp))
	return e.EncodeElement(*ctp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ConnectionTypeProperties.
func (ctp *ConnectionTypeProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ConnectionTypeProperties)(nil)).Elem().Size() != reflect.TypeOf((*connectionTypeProperties)(nil)).Elem().Size() {
		panic("size mismatch between ConnectionTypeProperties and connectionTypeProperties")
	}
	ctp2 := (*connectionTypeProperties)(unsafe.Pointer(ctp))
	return d.DecodeElement(ctp2, &start)
}

// internal type used for marshalling
type credentialProperties struct {
	UserName         *string      `json:"userName,omitempty"`
	CreationTime     *timeRFC3339 `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339 `json:"lastModifiedTime,omitempty"`
	Description      *string      `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for CredentialProperties.
func (cp CredentialProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*CredentialProperties)(nil)).Elem().Size() != reflect.TypeOf((*credentialProperties)(nil)).Elem().Size() {
		panic("size mismatch between CredentialProperties and credentialProperties")
	}
	cp2 := (*credentialProperties)(unsafe.Pointer(&cp))
	return e.EncodeElement(*cp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for CredentialProperties.
func (cp *CredentialProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*CredentialProperties)(nil)).Elem().Size() != reflect.TypeOf((*credentialProperties)(nil)).Elem().Size() {
		panic("size mismatch between CredentialProperties and credentialProperties")
	}
	cp2 := (*credentialProperties)(unsafe.Pointer(cp))
	return d.DecodeElement(cp2, &start)
}

// internal type used for marshalling
type activityProperties struct {
	Definition       *string                `json:"definition,omitempty"`
	ParameterSets    []ActivityParameterSet `json:"parameterSets,omitempty"`
	OutputTypes      []ActivityOutputType   `json:"outputTypes,omitempty"`
	CreationTime     *timeRFC3339           `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339           `json:"lastModifiedTime,omitempty"`
	Description      *string                `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ActivityProperties.
func (ap ActivityProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ActivityProperties)(nil)).Elem().Size() != reflect.TypeOf((*activityProperties)(nil)).Elem().Size() {
		panic("size mismatch between ActivityProperties and activityProperties")
	}
	ap2 := (*activityProperties)(unsafe.Pointer(&ap))
	return e.EncodeElement(*ap2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ActivityProperties.
func (ap *ActivityProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ActivityProperties)(nil)).Elem().Size() != reflect.TypeOf((*activityProperties)(nil)).Elem().Size() {
		panic("size mismatch between ActivityProperties and activityProperties")
	}
	ap2 := (*activityProperties)(unsafe.Pointer(ap))
	return d.DecodeElement(ap2, &start)
}

// internal type used for marshalling
type dscCompilationJobProperties struct {
	Configuration          *DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	StartedBy              *string                              `json:"startedBy,omitempty"`
	JobID                  *uuid.UUID                           `json:"jobId,omitempty"`
	CreationTime           *timeRFC3339                         `json:"creationTime,omitempty"`
	Status                 JobStatusType                        `json:"status,omitempty"`
	StatusDetails          *string                              `json:"statusDetails,omitempty"`
	StartTime              *timeRFC3339                         `json:"startTime,omitempty"`
	EndTime                *timeRFC3339                         `json:"endTime,omitempty"`
	Exception              *string                              `json:"exception,omitempty"`
	LastModifiedTime       *timeRFC3339                         `json:"lastModifiedTime,omitempty"`
	LastStatusModifiedTime *timeRFC3339                         `json:"lastStatusModifiedTime,omitempty"`
	Parameters             map[string]string                    `json:"parameters,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscCompilationJobProperties.
func (dcjp DscCompilationJobProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscCompilationJobProperties)(nil)).Elem().Size() != reflect.TypeOf((*dscCompilationJobProperties)(nil)).Elem().Size() {
		panic("size mismatch between DscCompilationJobProperties and dscCompilationJobProperties")
	}
	dcjp2 := (*dscCompilationJobProperties)(unsafe.Pointer(&dcjp))
	return e.EncodeElement(*dcjp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscCompilationJobProperties.
func (dcjp *DscCompilationJobProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscCompilationJobProperties)(nil)).Elem().Size() != reflect.TypeOf((*dscCompilationJobProperties)(nil)).Elem().Size() {
		panic("size mismatch between DscCompilationJobProperties and dscCompilationJobProperties")
	}
	dcjp2 := (*dscCompilationJobProperties)(unsafe.Pointer(dcjp))
	return d.DecodeElement(dcjp2, &start)
}

// internal type used for marshalling
type dscNodeConfiguration struct {
	Name             *string                              `json:"name,omitempty"`
	LastModifiedTime *timeRFC3339                         `json:"lastModifiedTime,omitempty"`
	CreationTime     *timeRFC3339                         `json:"creationTime,omitempty"`
	Configuration    *DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	ID               *string                              `json:"id,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscNodeConfiguration.
func (dnc DscNodeConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNodeConfiguration)(nil)).Elem().Size() != reflect.TypeOf((*dscNodeConfiguration)(nil)).Elem().Size() {
		panic("size mismatch between DscNodeConfiguration and dscNodeConfiguration")
	}
	dnc2 := (*dscNodeConfiguration)(unsafe.Pointer(&dnc))
	return e.EncodeElement(*dnc2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscNodeConfiguration.
func (dnc *DscNodeConfiguration) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNodeConfiguration)(nil)).Elem().Size() != reflect.TypeOf((*dscNodeConfiguration)(nil)).Elem().Size() {
		panic("size mismatch between DscNodeConfiguration and dscNodeConfiguration")
	}
	dnc2 := (*dscNodeConfiguration)(unsafe.Pointer(dnc))
	return d.DecodeElement(dnc2, &start)
}

// internal type used for marshalling
type dscReportResource struct {
	ResourceID        *string                       `json:"resourceId,omitempty"`
	SourceInfo        *string                       `json:"sourceInfo,omitempty"`
	DependsOn         []DscReportResourceNavigation `json:"dependsOn,omitempty"`
	ModuleName        *string                       `json:"moduleName,omitempty"`
	ModuleVersion     *string                       `json:"moduleVersion,omitempty"`
	ResourceName      *string                       `json:"resourceName,omitempty"`
	Error             *string                       `json:"error,omitempty"`
	Status            *string                       `json:"status,omitempty"`
	DurationInSeconds *float64                      `json:"durationInSeconds,omitempty"`
	StartDate         *timeRFC3339                  `json:"startDate,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscReportResource.
func (drr DscReportResource) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscReportResource)(nil)).Elem().Size() != reflect.TypeOf((*dscReportResource)(nil)).Elem().Size() {
		panic("size mismatch between DscReportResource and dscReportResource")
	}
	drr2 := (*dscReportResource)(unsafe.Pointer(&drr))
	return e.EncodeElement(*drr2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscReportResource.
func (drr *DscReportResource) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscReportResource)(nil)).Elem().Size() != reflect.TypeOf((*dscReportResource)(nil)).Elem().Size() {
		panic("size mismatch between DscReportResource and dscReportResource")
	}
	drr2 := (*dscReportResource)(unsafe.Pointer(drr))
	return d.DecodeElement(drr2, &start)
}

// internal type used for marshalling
type dscNodeReport struct {
	EndTime              *timeRFC3339          `json:"endTime,omitempty"`
	LastModifiedTime     *timeRFC3339          `json:"lastModifiedTime,omitempty"`
	StartTime            *timeRFC3339          `json:"startTime,omitempty"`
	Type                 *string               `json:"type,omitempty"`
	ReportID             *string               `json:"reportId,omitempty"`
	Status               *string               `json:"status,omitempty"`
	RefreshMode          *string               `json:"refreshMode,omitempty"`
	RebootRequested      *string               `json:"rebootRequested,omitempty"`
	ReportFormatVersion  *string               `json:"reportFormatVersion,omitempty"`
	ConfigurationVersion *string               `json:"configurationVersion,omitempty"`
	ID                   *string               `json:"id,omitempty"`
	Errors               []DscReportError      `json:"errors,omitempty"`
	Resources            []DscReportResource   `json:"resources,omitempty"`
	MetaConfiguration    *DscMetaConfiguration `json:"metaConfiguration,omitempty"`
	HostName             *string               `json:"hostName,omitempty"`
	IPV4Addresses        []string              `json:"iPV4Addresses,omitempty"`
	IPV6Addresses        []string              `json:"iPV6Addresses,omitempty"`
	NumberOfResources    *int32                `json:"numberOfResources,omitempty"`
	RawErrors            *string               `json:"rawErrors,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DscNodeReport.
func (dnr DscNodeReport) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNodeReport)(nil)).Elem().Size() != reflect.TypeOf((*dscNodeReport)(nil)).Elem().Size() {
		panic("size mismatch between DscNodeReport and dscNodeReport")
	}
	dnr2 := (*dscNodeReport)(unsafe.Pointer(&dnr))
	return e.EncodeElement(*dnr2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DscNodeReport.
func (dnr *DscNodeReport) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DscNodeReport)(nil)).Elem().Size() != reflect.TypeOf((*dscNodeReport)(nil)).Elem().Size() {
		panic("size mismatch between DscNodeReport and dscNodeReport")
	}
	dnr2 := (*dscNodeReport)(unsafe.Pointer(dnr))
	return d.DecodeElement(dnr2, &start)
}

// internal type used for marshalling
type hybridRunbookWorker struct {
	Name             *string      `json:"name,omitempty"`
	IP               *string      `json:"ip,omitempty"`
	RegistrationTime *timeRFC3339 `json:"registrationTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for HybridRunbookWorker.
func (hrw HybridRunbookWorker) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*HybridRunbookWorker)(nil)).Elem().Size() != reflect.TypeOf((*hybridRunbookWorker)(nil)).Elem().Size() {
		panic("size mismatch between HybridRunbookWorker and hybridRunbookWorker")
	}
	hrw2 := (*hybridRunbookWorker)(unsafe.Pointer(&hrw))
	return e.EncodeElement(*hrw2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for HybridRunbookWorker.
func (hrw *HybridRunbookWorker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*HybridRunbookWorker)(nil)).Elem().Size() != reflect.TypeOf((*hybridRunbookWorker)(nil)).Elem().Size() {
		panic("size mismatch between HybridRunbookWorker and hybridRunbookWorker")
	}
	hrw2 := (*hybridRunbookWorker)(unsafe.Pointer(hrw))
	return d.DecodeElement(hrw2, &start)
}

// internal type used for marshalling
type jobProperties struct {
	Runbook                *RunbookAssociationProperty `json:"runbook,omitempty"`
	StartedBy              *string                     `json:"startedBy,omitempty"`
	RunOn                  *string                     `json:"runOn,omitempty"`
	JobID                  *uuid.UUID                  `json:"jobId,omitempty"`
	CreationTime           *timeRFC3339                `json:"creationTime,omitempty"`
	Status                 JobStatusType               `json:"status,omitempty"`
	StatusDetails          *string                     `json:"statusDetails,omitempty"`
	StartTime              *timeRFC3339                `json:"startTime,omitempty"`
	EndTime                *timeRFC3339                `json:"endTime,omitempty"`
	Exception              *string                     `json:"exception,omitempty"`
	LastModifiedTime       *timeRFC3339                `json:"lastModifiedTime,omitempty"`
	LastStatusModifiedTime *timeRFC3339                `json:"lastStatusModifiedTime,omitempty"`
	Parameters             map[string]string           `json:"parameters,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for JobProperties.
func (jp JobProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*JobProperties)(nil)).Elem().Size() != reflect.TypeOf((*jobProperties)(nil)).Elem().Size() {
		panic("size mismatch between JobProperties and jobProperties")
	}
	jp2 := (*jobProperties)(unsafe.Pointer(&jp))
	return e.EncodeElement(*jp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for JobProperties.
func (jp *JobProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*JobProperties)(nil)).Elem().Size() != reflect.TypeOf((*jobProperties)(nil)).Elem().Size() {
		panic("size mismatch between JobProperties and jobProperties")
	}
	jp2 := (*jobProperties)(unsafe.Pointer(jp))
	return d.DecodeElement(jp2, &start)
}

// internal type used for marshalling
type jobStreamProperties struct {
	JobStreamID *string                           `json:"jobStreamId,omitempty"`
	Time        *timeRFC3339                      `json:"time,omitempty"`
	StreamType  JobStreamType                     `json:"streamType,omitempty"`
	StreamText  *string                           `json:"streamText,omitempty"`
	Summary     *string                           `json:"summary,omitempty"`
	Value       map[string]map[string]interface{} `json:"value,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for JobStreamProperties.
func (jsp JobStreamProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*JobStreamProperties)(nil)).Elem().Size() != reflect.TypeOf((*jobStreamProperties)(nil)).Elem().Size() {
		panic("size mismatch between JobStreamProperties and jobStreamProperties")
	}
	jsp2 := (*jobStreamProperties)(unsafe.Pointer(&jsp))
	return e.EncodeElement(*jsp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for JobStreamProperties.
func (jsp *JobStreamProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*JobStreamProperties)(nil)).Elem().Size() != reflect.TypeOf((*jobStreamProperties)(nil)).Elem().Size() {
		panic("size mismatch between JobStreamProperties and jobStreamProperties")
	}
	jsp2 := (*jobStreamProperties)(unsafe.Pointer(jsp))
	return d.DecodeElement(jsp2, &start)
}

// internal type used for marshalling
type scheduleCreateOrUpdateProperties struct {
	Description      *string                `json:"description,omitempty"`
	StartTime        timeRFC3339            `json:"startTime,omitempty"`
	ExpiryTime       *timeRFC3339           `json:"expiryTime,omitempty"`
	Interval         map[string]interface{} `json:"interval,omitempty"`
	Frequency        ScheduleFrequencyType  `json:"frequency,omitempty"`
	TimeZone         *string                `json:"timeZone,omitempty"`
	AdvancedSchedule *AdvancedSchedule      `json:"advancedSchedule,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ScheduleCreateOrUpdateProperties.
func (scoup ScheduleCreateOrUpdateProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ScheduleCreateOrUpdateProperties)(nil)).Elem().Size() != reflect.TypeOf((*scheduleCreateOrUpdateProperties)(nil)).Elem().Size() {
		panic("size mismatch between ScheduleCreateOrUpdateProperties and scheduleCreateOrUpdateProperties")
	}
	scoup2 := (*scheduleCreateOrUpdateProperties)(unsafe.Pointer(&scoup))
	return e.EncodeElement(*scoup2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ScheduleCreateOrUpdateProperties.
func (scoup *ScheduleCreateOrUpdateProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ScheduleCreateOrUpdateProperties)(nil)).Elem().Size() != reflect.TypeOf((*scheduleCreateOrUpdateProperties)(nil)).Elem().Size() {
		panic("size mismatch between ScheduleCreateOrUpdateProperties and scheduleCreateOrUpdateProperties")
	}
	scoup2 := (*scheduleCreateOrUpdateProperties)(unsafe.Pointer(scoup))
	return d.DecodeElement(scoup2, &start)
}

// internal type used for marshalling
type scheduleProperties struct {
	StartTime               *timeRFC3339           `json:"startTime,omitempty"`
	StartTimeOffsetMinutes  *float64               `json:"startTimeOffsetMinutes,omitempty"`
	ExpiryTime              *timeRFC3339           `json:"expiryTime,omitempty"`
	ExpiryTimeOffsetMinutes *float64               `json:"expiryTimeOffsetMinutes,omitempty"`
	IsEnabled               *bool                  `json:"isEnabled,omitempty"`
	NextRun                 *timeRFC3339           `json:"nextRun,omitempty"`
	NextRunOffsetMinutes    *float64               `json:"nextRunOffsetMinutes,omitempty"`
	Interval                map[string]interface{} `json:"interval,omitempty"`
	Frequency               ScheduleFrequencyType  `json:"frequency,omitempty"`
	TimeZone                *string                `json:"timeZone,omitempty"`
	AdvancedSchedule        *AdvancedSchedule      `json:"advancedSchedule,omitempty"`
	CreationTime            *timeRFC3339           `json:"creationTime,omitempty"`
	LastModifiedTime        *timeRFC3339           `json:"lastModifiedTime,omitempty"`
	Description             *string                `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ScheduleProperties.
func (sp ScheduleProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ScheduleProperties)(nil)).Elem().Size() != reflect.TypeOf((*scheduleProperties)(nil)).Elem().Size() {
		panic("size mismatch between ScheduleProperties and scheduleProperties")
	}
	sp2 := (*scheduleProperties)(unsafe.Pointer(&sp))
	return e.EncodeElement(*sp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ScheduleProperties.
func (sp *ScheduleProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ScheduleProperties)(nil)).Elem().Size() != reflect.TypeOf((*scheduleProperties)(nil)).Elem().Size() {
		panic("size mismatch between ScheduleProperties and scheduleProperties")
	}
	sp2 := (*scheduleProperties)(unsafe.Pointer(sp))
	return d.DecodeElement(sp2, &start)
}

// internal type used for marshalling
type testJob struct {
	CreationTime           *timeRFC3339      `json:"creationTime,omitempty"`
	Status                 *string           `json:"status,omitempty"`
	StatusDetails          *string           `json:"statusDetails,omitempty"`
	RunOn                  *string           `json:"runOn,omitempty"`
	StartTime              *timeRFC3339      `json:"startTime,omitempty"`
	EndTime                *timeRFC3339      `json:"endTime,omitempty"`
	Exception              *string           `json:"exception,omitempty"`
	LastModifiedTime       *timeRFC3339      `json:"lastModifiedTime,omitempty"`
	LastStatusModifiedTime *timeRFC3339      `json:"lastStatusModifiedTime,omitempty"`
	Parameters             map[string]string `json:"parameters,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for TestJob.
func (tj TestJob) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*TestJob)(nil)).Elem().Size() != reflect.TypeOf((*testJob)(nil)).Elem().Size() {
		panic("size mismatch between TestJob and testJob")
	}
	tj2 := (*testJob)(unsafe.Pointer(&tj))
	return e.EncodeElement(*tj2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for TestJob.
func (tj *TestJob) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*TestJob)(nil)).Elem().Size() != reflect.TypeOf((*testJob)(nil)).Elem().Size() {
		panic("size mismatch between TestJob and testJob")
	}
	tj2 := (*testJob)(unsafe.Pointer(tj))
	return d.DecodeElement(tj2, &start)
}

// internal type used for marshalling
type variableProperties struct {
	Value            *string      `json:"value,omitempty"`
	IsEncrypted      *bool        `json:"isEncrypted,omitempty"`
	CreationTime     *timeRFC3339 `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339 `json:"lastModifiedTime,omitempty"`
	Description      *string      `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for VariableProperties.
func (vp VariableProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*VariableProperties)(nil)).Elem().Size() != reflect.TypeOf((*variableProperties)(nil)).Elem().Size() {
		panic("size mismatch between VariableProperties and variableProperties")
	}
	vp2 := (*variableProperties)(unsafe.Pointer(&vp))
	return e.EncodeElement(*vp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for VariableProperties.
func (vp *VariableProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*VariableProperties)(nil)).Elem().Size() != reflect.TypeOf((*variableProperties)(nil)).Elem().Size() {
		panic("size mismatch between VariableProperties and variableProperties")
	}
	vp2 := (*variableProperties)(unsafe.Pointer(vp))
	return d.DecodeElement(vp2, &start)
}

// internal type used for marshalling
type webhookCreateOrUpdateProperties struct {
	IsEnabled  *bool                       `json:"isEnabled,omitempty"`
	URI        *string                     `json:"uri,omitempty"`
	ExpiryTime *timeRFC3339                `json:"expiryTime,omitempty"`
	Parameters map[string]string           `json:"parameters,omitempty"`
	Runbook    *RunbookAssociationProperty `json:"runbook,omitempty"`
	RunOn      *string                     `json:"runOn,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WebhookCreateOrUpdateProperties.
func (wcoup WebhookCreateOrUpdateProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WebhookCreateOrUpdateProperties)(nil)).Elem().Size() != reflect.TypeOf((*webhookCreateOrUpdateProperties)(nil)).Elem().Size() {
		panic("size mismatch between WebhookCreateOrUpdateProperties and webhookCreateOrUpdateProperties")
	}
	wcoup2 := (*webhookCreateOrUpdateProperties)(unsafe.Pointer(&wcoup))
	return e.EncodeElement(*wcoup2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WebhookCreateOrUpdateProperties.
func (wcoup *WebhookCreateOrUpdateProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WebhookCreateOrUpdateProperties)(nil)).Elem().Size() != reflect.TypeOf((*webhookCreateOrUpdateProperties)(nil)).Elem().Size() {
		panic("size mismatch between WebhookCreateOrUpdateProperties and webhookCreateOrUpdateProperties")
	}
	wcoup2 := (*webhookCreateOrUpdateProperties)(unsafe.Pointer(wcoup))
	return d.DecodeElement(wcoup2, &start)
}

// internal type used for marshalling
type webhookProperties struct {
	IsEnabled        *bool                       `json:"isEnabled,omitempty"`
	URI              *string                     `json:"uri,omitempty"`
	ExpiryTime       *timeRFC3339                `json:"expiryTime,omitempty"`
	LastInvokedTime  *timeRFC3339                `json:"lastInvokedTime,omitempty"`
	Parameters       map[string]string           `json:"parameters,omitempty"`
	Runbook          *RunbookAssociationProperty `json:"runbook,omitempty"`
	RunOn            *string                     `json:"runOn,omitempty"`
	CreationTime     *timeRFC3339                `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339                `json:"lastModifiedTime,omitempty"`
	Description      *string                     `json:"description,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WebhookProperties.
func (wp WebhookProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WebhookProperties)(nil)).Elem().Size() != reflect.TypeOf((*webhookProperties)(nil)).Elem().Size() {
		panic("size mismatch between WebhookProperties and webhookProperties")
	}
	wp2 := (*webhookProperties)(unsafe.Pointer(&wp))
	return e.EncodeElement(*wp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WebhookProperties.
func (wp *WebhookProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WebhookProperties)(nil)).Elem().Size() != reflect.TypeOf((*webhookProperties)(nil)).Elem().Size() {
		panic("size mismatch between WebhookProperties and webhookProperties")
	}
	wp2 := (*webhookProperties)(unsafe.Pointer(wp))
	return d.DecodeElement(wp2, &start)
}

// internal type used for marshalling
type softwareUpdateConfigurationCollectionItemProperties struct {
	UpdateConfiguration *CollectionItemUpdateConfiguration `json:"updateConfiguration,omitempty"`
	Frequency           ScheduleFrequencyType              `json:"frequency,omitempty"`
	StartTime           *timeRFC3339                       `json:"startTime,omitempty"`
	CreationTime        *timeRFC3339                       `json:"creationTime,omitempty"`
	LastModifiedTime    *timeRFC3339                       `json:"lastModifiedTime,omitempty"`
	ProvisioningState   *string                            `json:"provisioningState,omitempty"`
	NextRun             *timeRFC3339                       `json:"nextRun,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SoftwareUpdateConfigurationCollectionItemProperties.
func (succip SoftwareUpdateConfigurationCollectionItemProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationCollectionItemProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationCollectionItemProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationCollectionItemProperties and softwareUpdateConfigurationCollectionItemProperties")
	}
	succip2 := (*softwareUpdateConfigurationCollectionItemProperties)(unsafe.Pointer(&succip))
	return e.EncodeElement(*succip2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SoftwareUpdateConfigurationCollectionItemProperties.
func (succip *SoftwareUpdateConfigurationCollectionItemProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationCollectionItemProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationCollectionItemProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationCollectionItemProperties and softwareUpdateConfigurationCollectionItemProperties")
	}
	succip2 := (*softwareUpdateConfigurationCollectionItemProperties)(unsafe.Pointer(succip))
	return d.DecodeElement(succip2, &start)
}

// internal type used for marshalling
type softwareUpdateConfigurationProperties struct {
	UpdateConfiguration UpdateConfiguration `json:"updateConfiguration,omitempty"`
	ScheduleInfo        ScheduleProperties  `json:"scheduleInfo,omitempty"`
	ProvisioningState   *string             `json:"provisioningState,omitempty"`
	Error               *ErrorResponse      `json:"error,omitempty"`
	CreationTime        *timeRFC3339        `json:"creationTime,omitempty"`
	CreatedBy           *string             `json:"createdBy,omitempty"`
	LastModifiedTime    *timeRFC3339        `json:"lastModifiedTime,omitempty"`
	LastModifiedBy      *string             `json:"lastModifiedBy,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SoftwareUpdateConfigurationProperties.
func (sucp SoftwareUpdateConfigurationProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationProperties and softwareUpdateConfigurationProperties")
	}
	sucp2 := (*softwareUpdateConfigurationProperties)(unsafe.Pointer(&sucp))
	return e.EncodeElement(*sucp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SoftwareUpdateConfigurationProperties.
func (sucp *SoftwareUpdateConfigurationProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationProperties and softwareUpdateConfigurationProperties")
	}
	sucp2 := (*softwareUpdateConfigurationProperties)(unsafe.Pointer(sucp))
	return d.DecodeElement(sucp2, &start)
}

// internal type used for marshalling
type softwareUpdateConfigurationRunProperties struct {
	SoftwareUpdateConfiguration *UpdateConfigurationNavigation `json:"softwareUpdateConfiguration,omitempty"`
	Status                      *string                        `json:"status,omitempty"`
	ConfiguredDuration          *string                        `json:"configuredDuration,omitempty"`
	OsType                      *string                        `json:"osType,omitempty"`
	StartTime                   *timeRFC3339                   `json:"startTime,omitempty"`
	EndTime                     *timeRFC3339                   `json:"endTime,omitempty"`
	ComputerCount               *int32                         `json:"computerCount,omitempty"`
	FailedCount                 *int32                         `json:"failedCount,omitempty"`
	CreationTime                *timeRFC3339                   `json:"creationTime,omitempty"`
	CreatedBy                   *string                        `json:"createdBy,omitempty"`
	LastModifiedTime            *timeRFC3339                   `json:"lastModifiedTime,omitempty"`
	LastModifiedBy              *string                        `json:"lastModifiedBy,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SoftwareUpdateConfigurationRunProperties.
func (sucrp SoftwareUpdateConfigurationRunProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationRunProperties and softwareUpdateConfigurationRunProperties")
	}
	sucrp2 := (*softwareUpdateConfigurationRunProperties)(unsafe.Pointer(&sucrp))
	return e.EncodeElement(*sucrp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SoftwareUpdateConfigurationRunProperties.
func (sucrp *SoftwareUpdateConfigurationRunProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SoftwareUpdateConfigurationRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*softwareUpdateConfigurationRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between SoftwareUpdateConfigurationRunProperties and softwareUpdateConfigurationRunProperties")
	}
	sucrp2 := (*softwareUpdateConfigurationRunProperties)(unsafe.Pointer(sucrp))
	return d.DecodeElement(sucrp2, &start)
}

// internal type used for marshalling
type updateConfigurationMachineRunProperties struct {
	TargetComputer              *string                        `json:"targetComputer,omitempty"`
	TargetComputerType          *string                        `json:"targetComputerType,omitempty"`
	SoftwareUpdateConfiguration *UpdateConfigurationNavigation `json:"softwareUpdateConfiguration,omitempty"`
	Status                      *string                        `json:"status,omitempty"`
	OsType                      *string                        `json:"osType,omitempty"`
	CorrelationID               *uuid.UUID                     `json:"correlationId,omitempty"`
	SourceComputerID            *uuid.UUID                     `json:"sourceComputerId,omitempty"`
	StartTime                   *timeRFC3339                   `json:"startTime,omitempty"`
	EndTime                     *timeRFC3339                   `json:"endTime,omitempty"`
	ConfiguredDuration          *string                        `json:"configuredDuration,omitempty"`
	Job                         *JobNavigation                 `json:"job,omitempty"`
	CreationTime                *timeRFC3339                   `json:"creationTime,omitempty"`
	CreatedBy                   *string                        `json:"createdBy,omitempty"`
	LastModifiedTime            *timeRFC3339                   `json:"lastModifiedTime,omitempty"`
	LastModifiedBy              *string                        `json:"lastModifiedBy,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for UpdateConfigurationMachineRunProperties.
func (ucmrp UpdateConfigurationMachineRunProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*UpdateConfigurationMachineRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*updateConfigurationMachineRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between UpdateConfigurationMachineRunProperties and updateConfigurationMachineRunProperties")
	}
	ucmrp2 := (*updateConfigurationMachineRunProperties)(unsafe.Pointer(&ucmrp))
	return e.EncodeElement(*ucmrp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for UpdateConfigurationMachineRunProperties.
func (ucmrp *UpdateConfigurationMachineRunProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*UpdateConfigurationMachineRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*updateConfigurationMachineRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between UpdateConfigurationMachineRunProperties and updateConfigurationMachineRunProperties")
	}
	ucmrp2 := (*updateConfigurationMachineRunProperties)(unsafe.Pointer(ucmrp))
	return d.DecodeElement(ucmrp2, &start)
}

// internal type used for marshalling
type sourceControlProperties struct {
	RepoURL          *string      `json:"repoUrl,omitempty"`
	Branch           *string      `json:"branch,omitempty"`
	FolderPath       *string      `json:"folderPath,omitempty"`
	AutoSync         *bool        `json:"autoSync,omitempty"`
	PublishRunbook   *bool        `json:"publishRunbook,omitempty"`
	SourceType       SourceType   `json:"sourceType,omitempty"`
	Description      *string      `json:"description,omitempty"`
	CreationTime     *timeRFC3339 `json:"creationTime,omitempty"`
	LastModifiedTime *timeRFC3339 `json:"lastModifiedTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SourceControlProperties.
func (scp SourceControlProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlProperties and sourceControlProperties")
	}
	scp2 := (*sourceControlProperties)(unsafe.Pointer(&scp))
	return e.EncodeElement(*scp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SourceControlProperties.
func (scp *SourceControlProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlProperties and sourceControlProperties")
	}
	scp2 := (*sourceControlProperties)(unsafe.Pointer(scp))
	return d.DecodeElement(scp2, &start)
}

// internal type used for marshalling
type sourceControlSyncJobProperties struct {
	SourceControlSyncJobID *string               `json:"sourceControlSyncJobId,omitempty"`
	CreationTime           *timeRFC3339          `json:"creationTime,omitempty"`
	ProvisioningState      ProvisioningStateType `json:"provisioningState,omitempty"`
	StartTime              *timeRFC3339          `json:"startTime,omitempty"`
	EndTime                *timeRFC3339          `json:"endTime,omitempty"`
	StartedBy              *string               `json:"startedBy,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SourceControlSyncJobProperties.
func (scsjp SourceControlSyncJobProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlSyncJobProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlSyncJobProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlSyncJobProperties and sourceControlSyncJobProperties")
	}
	scsjp2 := (*sourceControlSyncJobProperties)(unsafe.Pointer(&scsjp))
	return e.EncodeElement(*scsjp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SourceControlSyncJobProperties.
func (scsjp *SourceControlSyncJobProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlSyncJobProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlSyncJobProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlSyncJobProperties and sourceControlSyncJobProperties")
	}
	scsjp2 := (*sourceControlSyncJobProperties)(unsafe.Pointer(scsjp))
	return d.DecodeElement(scsjp2, &start)
}

// internal type used for marshalling
type sourceControlSyncJobByIDProperties struct {
	SourceControlSyncJobID *string                         `json:"sourceControlSyncJobId,omitempty"`
	CreationTime           *timeRFC3339                    `json:"creationTime,omitempty"`
	ProvisioningState      ProvisioningStateType           `json:"provisioningState,omitempty"`
	StartTime              *timeRFC3339                    `json:"startTime,omitempty"`
	EndTime                *timeRFC3339                    `json:"endTime,omitempty"`
	StartedBy              *string                         `json:"startedBy,omitempty"`
	Errors                 *SourceControlSyncJobByIDErrors `json:"errors,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for SourceControlSyncJobByIDProperties.
func (scsjbip SourceControlSyncJobByIDProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlSyncJobByIDProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlSyncJobByIDProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlSyncJobByIDProperties and sourceControlSyncJobByIDProperties")
	}
	scsjbip2 := (*sourceControlSyncJobByIDProperties)(unsafe.Pointer(&scsjbip))
	return e.EncodeElement(*scsjbip2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for SourceControlSyncJobByIDProperties.
func (scsjbip *SourceControlSyncJobByIDProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*SourceControlSyncJobByIDProperties)(nil)).Elem().Size() != reflect.TypeOf((*sourceControlSyncJobByIDProperties)(nil)).Elem().Size() {
		panic("size mismatch between SourceControlSyncJobByIDProperties and sourceControlSyncJobByIDProperties")
	}
	scsjbip2 := (*sourceControlSyncJobByIDProperties)(unsafe.Pointer(scsjbip))
	return d.DecodeElement(scsjbip2, &start)
}
