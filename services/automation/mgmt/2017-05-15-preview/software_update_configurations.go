package automation

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// SoftwareUpdateConfigurationsClient is the automation Client
type SoftwareUpdateConfigurationsClient struct {
	ManagementClient
}

// NewSoftwareUpdateConfigurationsClient creates an instance of the SoftwareUpdateConfigurationsClient client.
func NewSoftwareUpdateConfigurationsClient(p pipeline.Pipeline) SoftwareUpdateConfigurationsClient {
	return SoftwareUpdateConfigurationsClient{NewManagementClient(p)}
}

// Create create a new software update configuration with the name given in the URI.
//
// softwareUpdateConfigurationName is the name of the software update configuration to be created. parameters is
// request body.
func (client SoftwareUpdateConfigurationsClient) Create(ctx context.Context, softwareUpdateConfigurationName string, parameters SoftwareUpdateConfiguration) (*SoftwareUpdateConfiguration, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}},
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.SoftwareUpdateConfigurationProperties", name: null, rule: true,
				chain: []constraint{{target: "parameters.SoftwareUpdateConfigurationProperties.UpdateConfiguration", name: null, rule: true, chain: nil},
					{target: "parameters.SoftwareUpdateConfigurationProperties.ScheduleInfo", name: null, rule: true, chain: nil},
				}}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(softwareUpdateConfigurationName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*SoftwareUpdateConfiguration), err
}

// createPreparer prepares the Create request.
func (client SoftwareUpdateConfigurationsClient) createPreparer(softwareUpdateConfigurationName string, parameters SoftwareUpdateConfiguration) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client SoftwareUpdateConfigurationsClient) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusBadRequest, http.StatusNotFound, http.StatusConflict)
	if resp == nil {
		return nil, err
	}
	result := &SoftwareUpdateConfiguration{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete delete a specific software update configuration.
//
// softwareUpdateConfigurationName is the name of the software update configuration to be created.
func (client SoftwareUpdateConfigurationsClient) Delete(ctx context.Context, softwareUpdateConfigurationName string) (*http.Response, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.deletePreparer(softwareUpdateConfigurationName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client SoftwareUpdateConfigurationsClient) deletePreparer(softwareUpdateConfigurationName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client SoftwareUpdateConfigurationsClient) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// GetByName get a single software update configuration by name.
//
// softwareUpdateConfigurationName is the name of the software update configuration to be created.
func (client SoftwareUpdateConfigurationsClient) GetByName(ctx context.Context, softwareUpdateConfigurationName string) (*SoftwareUpdateConfiguration, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.getByNamePreparer(softwareUpdateConfigurationName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getByNameResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*SoftwareUpdateConfiguration), err
}

// getByNamePreparer prepares the GetByName request.
func (client SoftwareUpdateConfigurationsClient) getByNamePreparer(softwareUpdateConfigurationName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	return req, nil
}

// getByNameResponder handles the response to the GetByName request.
func (client SoftwareUpdateConfigurationsClient) getByNameResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &SoftwareUpdateConfiguration{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List get all software update configurations for the account.
//
// filter is the filter to apply on the operation.
func (client SoftwareUpdateConfigurationsClient) List(ctx context.Context, filter *string) (*SoftwareUpdateConfigurationListResult, error) {
	if err := validate([]validation{
		{targetValue: client.ResourceGroupName,
			constraints: []constraint{{target: "client.ResourceGroupName", name: pattern, rule: `^[-\w\._]+$`, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.listPreparer(filter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*SoftwareUpdateConfigurationListResult), err
}

// listPreparer prepares the List request.
func (client SoftwareUpdateConfigurationsClient) listPreparer(filter *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2017-05-15-preview")
	if filter != nil {
		params.Set("$filter", *filter)
	}
	req.URL.RawQuery = params.Encode()
	if clientRequestID != nil {
		req.Header.Set("clientRequestId", *client.ClientRequestID)
	}
	return req, nil
}

// listResponder handles the response to the List request.
func (client SoftwareUpdateConfigurationsClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &SoftwareUpdateConfigurationListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
