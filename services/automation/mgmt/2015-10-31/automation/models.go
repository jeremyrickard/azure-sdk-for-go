package automation

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	uuid "github.com/satori/go.uuid"
	"io"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// AccountStateType enumerates the values for account state type.
type AccountStateType string

const (
	// AccountStateNone represents an empty AccountStateType.
	AccountStateNone AccountStateType = ""
	// AccountStateOk ...
	AccountStateOk AccountStateType = "Ok"
	// AccountStateSuspended ...
	AccountStateSuspended AccountStateType = "Suspended"
	// AccountStateUnavailable ...
	AccountStateUnavailable AccountStateType = "Unavailable"
)

// AgentRegistrationKeyNameType enumerates the values for agent registration key name.
type AgentRegistrationKeyNameType string

const (
	// AgentRegistrationKeyNameNone represents an empty AgentRegistrationKeyNameType.
	AgentRegistrationKeyNameNone AgentRegistrationKeyNameType = ""
	// AgentRegistrationKeyNamePrimary ...
	AgentRegistrationKeyNamePrimary AgentRegistrationKeyNameType = "Primary"
	// AgentRegistrationKeyNameSecondary ...
	AgentRegistrationKeyNameSecondary AgentRegistrationKeyNameType = "Secondary"
)

// ContentSourceType enumerates the values for content source type.
type ContentSourceType string

const (
	// ContentSourceEmbeddedContent ...
	ContentSourceEmbeddedContent ContentSourceType = "embeddedContent"
	// ContentSourceNone represents an empty ContentSourceType.
	ContentSourceNone ContentSourceType = ""
	// ContentSourceURI ...
	ContentSourceURI ContentSourceType = "uri"
)

// DscConfigurationProvisioningStateType enumerates the values for dsc configuration provisioning state.
type DscConfigurationProvisioningStateType string

const (
	// DscConfigurationProvisioningStateNone represents an empty DscConfigurationProvisioningStateType.
	DscConfigurationProvisioningStateNone DscConfigurationProvisioningStateType = ""
	// DscConfigurationProvisioningStateSucceeded ...
	DscConfigurationProvisioningStateSucceeded DscConfigurationProvisioningStateType = "Succeeded"
)

// DscConfigurationStateType enumerates the values for dsc configuration state.
type DscConfigurationStateType string

const (
	// DscConfigurationStateEdit ...
	DscConfigurationStateEdit DscConfigurationStateType = "Edit"
	// DscConfigurationStateNew ...
	DscConfigurationStateNew DscConfigurationStateType = "New"
	// DscConfigurationStateNone represents an empty DscConfigurationStateType.
	DscConfigurationStateNone DscConfigurationStateType = ""
	// DscConfigurationStatePublished ...
	DscConfigurationStatePublished DscConfigurationStateType = "Published"
)

// HTTPStatusCodeType enumerates the values for http status code.
type HTTPStatusCodeType string

const (
	// HTTPStatusCodeAccepted ...
	HTTPStatusCodeAccepted HTTPStatusCodeType = "Accepted"
	// HTTPStatusCodeAmbiguous ...
	HTTPStatusCodeAmbiguous HTTPStatusCodeType = "Ambiguous"
	// HTTPStatusCodeBadGateway ...
	HTTPStatusCodeBadGateway HTTPStatusCodeType = "BadGateway"
	// HTTPStatusCodeBadRequest ...
	HTTPStatusCodeBadRequest HTTPStatusCodeType = "BadRequest"
	// HTTPStatusCodeConflict ...
	HTTPStatusCodeConflict HTTPStatusCodeType = "Conflict"
	// HTTPStatusCodeContinue ...
	HTTPStatusCodeContinue HTTPStatusCodeType = "Continue"
	// HTTPStatusCodeCreated ...
	HTTPStatusCodeCreated HTTPStatusCodeType = "Created"
	// HTTPStatusCodeExpectationFailed ...
	HTTPStatusCodeExpectationFailed HTTPStatusCodeType = "ExpectationFailed"
	// HTTPStatusCodeForbidden ...
	HTTPStatusCodeForbidden HTTPStatusCodeType = "Forbidden"
	// HTTPStatusCodeFound ...
	HTTPStatusCodeFound HTTPStatusCodeType = "Found"
	// HTTPStatusCodeGatewayTimeout ...
	HTTPStatusCodeGatewayTimeout HTTPStatusCodeType = "GatewayTimeout"
	// HTTPStatusCodeGone ...
	HTTPStatusCodeGone HTTPStatusCodeType = "Gone"
	// HTTPStatusCodeHTTPVersionNotSupported ...
	HTTPStatusCodeHTTPVersionNotSupported HTTPStatusCodeType = "HttpVersionNotSupported"
	// HTTPStatusCodeInternalServerError ...
	HTTPStatusCodeInternalServerError HTTPStatusCodeType = "InternalServerError"
	// HTTPStatusCodeLengthRequired ...
	HTTPStatusCodeLengthRequired HTTPStatusCodeType = "LengthRequired"
	// HTTPStatusCodeMethodNotAllowed ...
	HTTPStatusCodeMethodNotAllowed HTTPStatusCodeType = "MethodNotAllowed"
	// HTTPStatusCodeMoved ...
	HTTPStatusCodeMoved HTTPStatusCodeType = "Moved"
	// HTTPStatusCodeMovedPermanently ...
	HTTPStatusCodeMovedPermanently HTTPStatusCodeType = "MovedPermanently"
	// HTTPStatusCodeMultipleChoices ...
	HTTPStatusCodeMultipleChoices HTTPStatusCodeType = "MultipleChoices"
	// HTTPStatusCodeNoContent ...
	HTTPStatusCodeNoContent HTTPStatusCodeType = "NoContent"
	// HTTPStatusCodeNonAuthoritativeInformation ...
	HTTPStatusCodeNonAuthoritativeInformation HTTPStatusCodeType = "NonAuthoritativeInformation"
	// HTTPStatusCodeNone represents an empty HTTPStatusCodeType.
	HTTPStatusCodeNone HTTPStatusCodeType = ""
	// HTTPStatusCodeNotAcceptable ...
	HTTPStatusCodeNotAcceptable HTTPStatusCodeType = "NotAcceptable"
	// HTTPStatusCodeNotFound ...
	HTTPStatusCodeNotFound HTTPStatusCodeType = "NotFound"
	// HTTPStatusCodeNotImplemented ...
	HTTPStatusCodeNotImplemented HTTPStatusCodeType = "NotImplemented"
	// HTTPStatusCodeNotModified ...
	HTTPStatusCodeNotModified HTTPStatusCodeType = "NotModified"
	// HTTPStatusCodeOK ...
	HTTPStatusCodeOK HTTPStatusCodeType = "OK"
	// HTTPStatusCodePartialContent ...
	HTTPStatusCodePartialContent HTTPStatusCodeType = "PartialContent"
	// HTTPStatusCodePaymentRequired ...
	HTTPStatusCodePaymentRequired HTTPStatusCodeType = "PaymentRequired"
	// HTTPStatusCodePreconditionFailed ...
	HTTPStatusCodePreconditionFailed HTTPStatusCodeType = "PreconditionFailed"
	// HTTPStatusCodeProxyAuthenticationRequired ...
	HTTPStatusCodeProxyAuthenticationRequired HTTPStatusCodeType = "ProxyAuthenticationRequired"
	// HTTPStatusCodeRedirect ...
	HTTPStatusCodeRedirect HTTPStatusCodeType = "Redirect"
	// HTTPStatusCodeRedirectKeepVerb ...
	HTTPStatusCodeRedirectKeepVerb HTTPStatusCodeType = "RedirectKeepVerb"
	// HTTPStatusCodeRedirectMethod ...
	HTTPStatusCodeRedirectMethod HTTPStatusCodeType = "RedirectMethod"
	// HTTPStatusCodeRequestedRangeNotSatisfiable ...
	HTTPStatusCodeRequestedRangeNotSatisfiable HTTPStatusCodeType = "RequestedRangeNotSatisfiable"
	// HTTPStatusCodeRequestEntityTooLarge ...
	HTTPStatusCodeRequestEntityTooLarge HTTPStatusCodeType = "RequestEntityTooLarge"
	// HTTPStatusCodeRequestTimeout ...
	HTTPStatusCodeRequestTimeout HTTPStatusCodeType = "RequestTimeout"
	// HTTPStatusCodeRequestURITooLong ...
	HTTPStatusCodeRequestURITooLong HTTPStatusCodeType = "RequestUriTooLong"
	// HTTPStatusCodeResetContent ...
	HTTPStatusCodeResetContent HTTPStatusCodeType = "ResetContent"
	// HTTPStatusCodeSeeOther ...
	HTTPStatusCodeSeeOther HTTPStatusCodeType = "SeeOther"
	// HTTPStatusCodeServiceUnavailable ...
	HTTPStatusCodeServiceUnavailable HTTPStatusCodeType = "ServiceUnavailable"
	// HTTPStatusCodeSwitchingProtocols ...
	HTTPStatusCodeSwitchingProtocols HTTPStatusCodeType = "SwitchingProtocols"
	// HTTPStatusCodeTemporaryRedirect ...
	HTTPStatusCodeTemporaryRedirect HTTPStatusCodeType = "TemporaryRedirect"
	// HTTPStatusCodeUnauthorized ...
	HTTPStatusCodeUnauthorized HTTPStatusCodeType = "Unauthorized"
	// HTTPStatusCodeUnsupportedMediaType ...
	HTTPStatusCodeUnsupportedMediaType HTTPStatusCodeType = "UnsupportedMediaType"
	// HTTPStatusCodeUnused ...
	HTTPStatusCodeUnused HTTPStatusCodeType = "Unused"
	// HTTPStatusCodeUpgradeRequired ...
	HTTPStatusCodeUpgradeRequired HTTPStatusCodeType = "UpgradeRequired"
	// HTTPStatusCodeUseProxy ...
	HTTPStatusCodeUseProxy HTTPStatusCodeType = "UseProxy"
)

// JobStatusType enumerates the values for job status.
type JobStatusType string

const (
	// JobStatusActivating ...
	JobStatusActivating JobStatusType = "Activating"
	// JobStatusBlocked ...
	JobStatusBlocked JobStatusType = "Blocked"
	// JobStatusCompleted ...
	JobStatusCompleted JobStatusType = "Completed"
	// JobStatusDisconnected ...
	JobStatusDisconnected JobStatusType = "Disconnected"
	// JobStatusFailed ...
	JobStatusFailed JobStatusType = "Failed"
	// JobStatusNew ...
	JobStatusNew JobStatusType = "New"
	// JobStatusNone represents an empty JobStatusType.
	JobStatusNone JobStatusType = ""
	// JobStatusRemoving ...
	JobStatusRemoving JobStatusType = "Removing"
	// JobStatusResuming ...
	JobStatusResuming JobStatusType = "Resuming"
	// JobStatusRunning ...
	JobStatusRunning JobStatusType = "Running"
	// JobStatusStopped ...
	JobStatusStopped JobStatusType = "Stopped"
	// JobStatusStopping ...
	JobStatusStopping JobStatusType = "Stopping"
	// JobStatusSuspended ...
	JobStatusSuspended JobStatusType = "Suspended"
	// JobStatusSuspending ...
	JobStatusSuspending JobStatusType = "Suspending"
)

// JobStreamType enumerates the values for job stream type.
type JobStreamType string

const (
	// JobStreamAny ...
	JobStreamAny JobStreamType = "Any"
	// JobStreamDebug ...
	JobStreamDebug JobStreamType = "Debug"
	// JobStreamError ...
	JobStreamError JobStreamType = "Error"
	// JobStreamNone represents an empty JobStreamType.
	JobStreamNone JobStreamType = ""
	// JobStreamOutput ...
	JobStreamOutput JobStreamType = "Output"
	// JobStreamProgress ...
	JobStreamProgress JobStreamType = "Progress"
	// JobStreamVerbose ...
	JobStreamVerbose JobStreamType = "Verbose"
	// JobStreamWarning ...
	JobStreamWarning JobStreamType = "Warning"
)

// ModuleProvisioningStateType enumerates the values for module provisioning state.
type ModuleProvisioningStateType string

const (
	// ModuleProvisioningStateActivitiesStored ...
	ModuleProvisioningStateActivitiesStored ModuleProvisioningStateType = "ActivitiesStored"
	// ModuleProvisioningStateCancelled ...
	ModuleProvisioningStateCancelled ModuleProvisioningStateType = "Cancelled"
	// ModuleProvisioningStateConnectionTypeImported ...
	ModuleProvisioningStateConnectionTypeImported ModuleProvisioningStateType = "ConnectionTypeImported"
	// ModuleProvisioningStateContentDownloaded ...
	ModuleProvisioningStateContentDownloaded ModuleProvisioningStateType = "ContentDownloaded"
	// ModuleProvisioningStateContentRetrieved ...
	ModuleProvisioningStateContentRetrieved ModuleProvisioningStateType = "ContentRetrieved"
	// ModuleProvisioningStateContentStored ...
	ModuleProvisioningStateContentStored ModuleProvisioningStateType = "ContentStored"
	// ModuleProvisioningStateContentValidated ...
	ModuleProvisioningStateContentValidated ModuleProvisioningStateType = "ContentValidated"
	// ModuleProvisioningStateCreated ...
	ModuleProvisioningStateCreated ModuleProvisioningStateType = "Created"
	// ModuleProvisioningStateCreating ...
	ModuleProvisioningStateCreating ModuleProvisioningStateType = "Creating"
	// ModuleProvisioningStateFailed ...
	ModuleProvisioningStateFailed ModuleProvisioningStateType = "Failed"
	// ModuleProvisioningStateModuleDataStored ...
	ModuleProvisioningStateModuleDataStored ModuleProvisioningStateType = "ModuleDataStored"
	// ModuleProvisioningStateModuleImportRunbookComplete ...
	ModuleProvisioningStateModuleImportRunbookComplete ModuleProvisioningStateType = "ModuleImportRunbookComplete"
	// ModuleProvisioningStateNone represents an empty ModuleProvisioningStateType.
	ModuleProvisioningStateNone ModuleProvisioningStateType = ""
	// ModuleProvisioningStateRunningImportModuleRunbook ...
	ModuleProvisioningStateRunningImportModuleRunbook ModuleProvisioningStateType = "RunningImportModuleRunbook"
	// ModuleProvisioningStateStartingImportModuleRunbook ...
	ModuleProvisioningStateStartingImportModuleRunbook ModuleProvisioningStateType = "StartingImportModuleRunbook"
	// ModuleProvisioningStateSucceeded ...
	ModuleProvisioningStateSucceeded ModuleProvisioningStateType = "Succeeded"
	// ModuleProvisioningStateUpdating ...
	ModuleProvisioningStateUpdating ModuleProvisioningStateType = "Updating"
)

// RunbookProvisioningStateType enumerates the values for runbook provisioning state.
type RunbookProvisioningStateType string

const (
	// RunbookProvisioningStateNone represents an empty RunbookProvisioningStateType.
	RunbookProvisioningStateNone RunbookProvisioningStateType = ""
	// RunbookProvisioningStateSucceeded ...
	RunbookProvisioningStateSucceeded RunbookProvisioningStateType = "Succeeded"
)

// RunbookStateType enumerates the values for runbook state.
type RunbookStateType string

const (
	// RunbookStateEdit ...
	RunbookStateEdit RunbookStateType = "Edit"
	// RunbookStateNew ...
	RunbookStateNew RunbookStateType = "New"
	// RunbookStateNone represents an empty RunbookStateType.
	RunbookStateNone RunbookStateType = ""
	// RunbookStatePublished ...
	RunbookStatePublished RunbookStateType = "Published"
)

// RunbookTypeEnumType enumerates the values for runbook type enum.
type RunbookTypeEnumType string

const (
	// RunbookTypeEnumGraph ...
	RunbookTypeEnumGraph RunbookTypeEnumType = "Graph"
	// RunbookTypeEnumGraphPowerShell ...
	RunbookTypeEnumGraphPowerShell RunbookTypeEnumType = "GraphPowerShell"
	// RunbookTypeEnumGraphPowerShellWorkflow ...
	RunbookTypeEnumGraphPowerShellWorkflow RunbookTypeEnumType = "GraphPowerShellWorkflow"
	// RunbookTypeEnumNone represents an empty RunbookTypeEnumType.
	RunbookTypeEnumNone RunbookTypeEnumType = ""
	// RunbookTypeEnumPowerShell ...
	RunbookTypeEnumPowerShell RunbookTypeEnumType = "PowerShell"
	// RunbookTypeEnumPowerShellWorkflow ...
	RunbookTypeEnumPowerShellWorkflow RunbookTypeEnumType = "PowerShellWorkflow"
	// RunbookTypeEnumScript ...
	RunbookTypeEnumScript RunbookTypeEnumType = "Script"
)

// ScheduleDayType enumerates the values for schedule day.
type ScheduleDayType string

const (
	// ScheduleDayFriday ...
	ScheduleDayFriday ScheduleDayType = "Friday"
	// ScheduleDayMonday ...
	ScheduleDayMonday ScheduleDayType = "Monday"
	// ScheduleDayNone represents an empty ScheduleDayType.
	ScheduleDayNone ScheduleDayType = ""
	// ScheduleDaySaturday ...
	ScheduleDaySaturday ScheduleDayType = "Saturday"
	// ScheduleDaySunday ...
	ScheduleDaySunday ScheduleDayType = "Sunday"
	// ScheduleDayThursday ...
	ScheduleDayThursday ScheduleDayType = "Thursday"
	// ScheduleDayTuesday ...
	ScheduleDayTuesday ScheduleDayType = "Tuesday"
	// ScheduleDayWednesday ...
	ScheduleDayWednesday ScheduleDayType = "Wednesday"
)

// ScheduleFrequencyType enumerates the values for schedule frequency.
type ScheduleFrequencyType string

const (
	// ScheduleFrequencyDay ...
	ScheduleFrequencyDay ScheduleFrequencyType = "Day"
	// ScheduleFrequencyHour ...
	ScheduleFrequencyHour ScheduleFrequencyType = "Hour"
	// ScheduleFrequencyMonth ...
	ScheduleFrequencyMonth ScheduleFrequencyType = "Month"
	// ScheduleFrequencyNone represents an empty ScheduleFrequencyType.
	ScheduleFrequencyNone ScheduleFrequencyType = ""
	// ScheduleFrequencyOneTime ...
	ScheduleFrequencyOneTime ScheduleFrequencyType = "OneTime"
	// ScheduleFrequencyWeek ...
	ScheduleFrequencyWeek ScheduleFrequencyType = "Week"
)

// SkuNameEnumType enumerates the values for sku name enum.
type SkuNameEnumType string

const (
	// SkuNameEnumBasic ...
	SkuNameEnumBasic SkuNameEnumType = "Basic"
	// SkuNameEnumFree ...
	SkuNameEnumFree SkuNameEnumType = "Free"
	// SkuNameEnumNone represents an empty SkuNameEnumType.
	SkuNameEnumNone SkuNameEnumType = ""
)

// Account - Definition of the automation account type.
type Account struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the automation account properties.
	*AccountProperties `json:"properties,omitempty"`
	// Etag - Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (a Account) Response() *http.Response {
	return a.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (a Account) StatusCode() int {
	return a.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (a Account) Status() string {
	return a.rawResponse.Status
}

// AccountCreateOrUpdateParameters - The parameters supplied to the create or update automation account operation.
type AccountCreateOrUpdateParameters struct {
	// Properties - Gets or sets account create or update properties.
	*AccountCreateOrUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// AccountCreateOrUpdateProperties - The parameters supplied to the create or update account properties.
type AccountCreateOrUpdateProperties struct {
	// Sku - Gets or sets account SKU.
	Sku *Sku `json:"sku,omitempty"`
}

// AccountListResult - The response model for the list account operation.
type AccountListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets list of accounts.
	Value []Account `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (alr AccountListResult) Response() *http.Response {
	return alr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alr AccountListResult) StatusCode() int {
	return alr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alr AccountListResult) Status() string {
	return alr.rawResponse.Status
}

// AccountProperties - Definition of the account property.
type AccountProperties struct {
	// Sku - Gets or sets the SKU of account.
	Sku *Sku `json:"sku,omitempty"`
	// LastModifiedBy - Gets or sets the last modified by.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// State - Gets status of account. Possible values include: 'Ok', 'Unavailable', 'Suspended', 'None'
	State AccountStateType `json:"state,omitempty"`
	// CreationTime - Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// AccountUpdateParameters - The parameters supplied to the update automation account operation.
type AccountUpdateParameters struct {
	// Properties - Gets or sets account update properties.
	*AccountUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// AccountUpdateProperties - The parameters supplied to the update account properties.
type AccountUpdateProperties struct {
	// Sku - Gets or sets account SKU.
	Sku *Sku `json:"sku,omitempty"`
}

// Activity - Definition of the activity.
type Activity struct {
	rawResponse *http.Response
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the activity.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the activity.
	*ActivityProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (a Activity) Response() *http.Response {
	return a.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (a Activity) StatusCode() int {
	return a.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (a Activity) Status() string {
	return a.rawResponse.Status
}

// ActivityListResult - The response model for the list activity operation.
type ActivityListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of activities.
	Value []Activity `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (alr ActivityListResult) Response() *http.Response {
	return alr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alr ActivityListResult) StatusCode() int {
	return alr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alr ActivityListResult) Status() string {
	return alr.rawResponse.Status
}

// ActivityOutputType - Definition of the activity output type.
type ActivityOutputType struct {
	// Name - Gets or sets the name of the activity output type.
	Name *string `json:"name,omitempty"`
	// Type - Gets or sets the type of the activity output type.
	Type *string `json:"type,omitempty"`
}

// ActivityParameter - Definition of the activity parameter.
type ActivityParameter struct {
	// Name - Gets or sets the name of the activity parameter.
	Name *string `json:"name,omitempty"`
	// Type - Gets or sets the type of the activity parameter.
	Type *string `json:"type,omitempty"`
	// IsMandatory - Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.
	IsMandatory *bool `json:"isMandatory,omitempty"`
	// IsDynamic - Gets or sets a Boolean value that indicates true if the parameter is dynamic.
	IsDynamic *bool `json:"isDynamic,omitempty"`
	// Position - Gets or sets the position of the activity parameter.
	Position *bool `json:"position,omitempty"`
	// ValueFromPipeline - Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.
	ValueFromPipeline *bool `json:"valueFromPipeline,omitempty"`
	// ValueFromPipelineByPropertyName - Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name.
	ValueFromPipelineByPropertyName *bool `json:"valueFromPipelineByPropertyName,omitempty"`
	// ValueFromRemainingArguments - Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.
	ValueFromRemainingArguments *bool `json:"valueFromRemainingArguments,omitempty"`
}

// ActivityParameterSet - Definition of the activity parameter set.
type ActivityParameterSet struct {
	// Name - Gets or sets the name of the activity parameter set.
	Name *string `json:"name,omitempty"`
	// Parameters - Gets or sets the parameters of the activity parameter set.
	Parameters []ActivityParameter `json:"parameters,omitempty"`
}

// ActivityProperties - Properties of the activity.
type ActivityProperties struct {
	// Definition - Gets or sets the user name of the activity.
	Definition *string `json:"definition,omitempty"`
	// ParameterSets - Gets or sets the parameter sets of the activity.
	ParameterSets []ActivityParameterSet `json:"parameterSets,omitempty"`
	// OutputTypes - Gets or sets the output types of the activity.
	OutputTypes []ActivityOutputType `json:"outputTypes,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// AdvancedSchedule - The properties of the create Advanced Schedule.
type AdvancedSchedule struct {
	// WeekDays - Days of the week that the job should execute on.
	WeekDays []string `json:"weekDays,omitempty"`
	// MonthDays - Days of the month that the job should execute on. Must be between 1 and 31.
	MonthDays []int32 `json:"monthDays,omitempty"`
	// MonthlyOccurrences - Occurrences of days within a month.
	MonthlyOccurrences []AdvancedScheduleMonthlyOccurrence `json:"monthlyOccurrences,omitempty"`
}

// AdvancedScheduleMonthlyOccurrence - The properties of the create advanced schedule monthly occurrence.
type AdvancedScheduleMonthlyOccurrence struct {
	// Occurrence - Occurrence of the week within the month. Must be between 1 and 5
	Occurrence *int32 `json:"occurrence,omitempty"`
	// Day - Day of the occurrence. Must be one of monday, tuesday, wednesday,thursday, friday, saturday, sunday. Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'None'
	Day ScheduleDayType `json:"day,omitempty"`
}

// AgentRegistration - Definition of the agent registration infomration type.
type AgentRegistration struct {
	rawResponse *http.Response
	// DscMetaConfiguration - Gets or sets the dsc meta configuration.
	DscMetaConfiguration *string `json:"dscMetaConfiguration,omitempty"`
	// Endpoint - Gets or sets the dsc server endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Keys - Gets or sets the agent registration keys.
	Keys *AgentRegistrationKeys `json:"keys,omitempty"`
	// ID - Gets or sets the id.
	ID *string `json:"id,omitempty"`
}

// Response returns the raw HTTP response object.
func (ar AgentRegistration) Response() *http.Response {
	return ar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ar AgentRegistration) StatusCode() int {
	return ar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ar AgentRegistration) Status() string {
	return ar.rawResponse.Status
}

// AgentRegistrationKeys - Definition of the agent registration keys.
type AgentRegistrationKeys struct {
	// Primary - Gets or sets the primary key.
	Primary *string `json:"primary,omitempty"`
	// Secondary - Gets or sets the secondary key.
	Secondary *string `json:"secondary,omitempty"`
}

// AgentRegistrationRegenerateKeyParameter - The parameters supplied to the regenerate keys operation.
type AgentRegistrationRegenerateKeyParameter struct {
	// KeyName - Gets or sets the agent registration key name - Primary or Secondary. Possible values include: 'Primary', 'Secondary', 'None'
	KeyName AgentRegistrationKeyNameType `json:"keyName,omitempty"`
	// Name - Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// Certificate - Definition of the certificate.
type Certificate struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the certificate.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the certificate.
	*CertificateProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (c Certificate) Response() *http.Response {
	return c.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (c Certificate) StatusCode() int {
	return c.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (c Certificate) Status() string {
	return c.rawResponse.Status
}

// CertificateCreateOrUpdateParameters - The parameters supplied to the create or update or replace certificate
// operation.
type CertificateCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the certificate.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the certificate.
	*CertificateCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CertificateCreateOrUpdateProperties - The properties of the create certificate operation.
type CertificateCreateOrUpdateProperties struct {
	// Base64Value - Gets or sets the base64 encoded value of the certificate.
	Base64Value string `json:"base64Value,omitempty"`
	// Description - Gets or sets the description of the certificate.
	Description *string `json:"description,omitempty"`
	// Thumbprint - Gets or sets the thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// IsExportable - Gets or sets the is exportable flag of the certificate.
	IsExportable *bool `json:"isExportable,omitempty"`
}

// CertificateListResult - The response model for the list certificate operation.
type CertificateListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of certificates.
	Value []Certificate `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (clr CertificateListResult) Response() *http.Response {
	return clr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (clr CertificateListResult) StatusCode() int {
	return clr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (clr CertificateListResult) Status() string {
	return clr.rawResponse.Status
}

// CertificateProperties - Properties of the certificate.
type CertificateProperties struct {
	// Thumbprint - Gets the thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// ExpiryTime - Gets the expiry time of the certificate.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	// IsExportable - Gets the is exportable flag of the certificate.
	IsExportable *bool `json:"isExportable,omitempty"`
	// CreationTime - Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// CertificateUpdateParameters - The parameters supplied to the update certificate operation.
type CertificateUpdateParameters struct {
	// Name - Gets or sets the name of the certificate.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the certificate.
	*CertificateUpdateProperties `json:"properties,omitempty"`
}

// CertificateUpdateProperties - The properties of the update certificate operation
type CertificateUpdateProperties struct {
	// Description - Gets or sets the description of the certificate.
	Description *string `json:"description,omitempty"`
}

// Connection - Definition of the connection.
type Connection struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the connection.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the connection.
	*ConnectionProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (c Connection) Response() *http.Response {
	return c.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (c Connection) StatusCode() int {
	return c.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (c Connection) Status() string {
	return c.rawResponse.Status
}

// ConnectionCreateOrUpdateParameters - The parameters supplied to the create or update connection operation.
type ConnectionCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the connection.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the connection.
	*ConnectionCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ConnectionCreateOrUpdateProperties - The properties of the create connection properties
type ConnectionCreateOrUpdateProperties struct {
	// Description - Gets or sets the description of the connection.
	Description *string `json:"description,omitempty"`
	// ConnectionType - Gets or sets the connectionType of the connection.
	ConnectionType ConnectionTypeAssociationProperty `json:"connectionType,omitempty"`
	// FieldDefinitionValues - Gets or sets the field definition properties of the connection.
	FieldDefinitionValues map[string]string `json:"fieldDefinitionValues,omitempty"`
}

// ConnectionListResult - The response model for the list connection operation.
type ConnectionListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of connection.
	Value []Connection `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (clr ConnectionListResult) Response() *http.Response {
	return clr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (clr ConnectionListResult) StatusCode() int {
	return clr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (clr ConnectionListResult) Status() string {
	return clr.rawResponse.Status
}

// ConnectionProperties - Definition of the connection properties.
type ConnectionProperties struct {
	// ConnectionType - Gets or sets the connectionType of the connection.
	ConnectionType *ConnectionTypeAssociationProperty `json:"connectionType,omitempty"`
	// FieldDefinitionValues - Gets the field definition values of the connection.
	FieldDefinitionValues map[string]string `json:"fieldDefinitionValues,omitempty"`
	// CreationTime - Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// ConnectionType - Definition of the connection type.
type ConnectionType struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the connection type.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the connection type.
	*ConnectionTypeProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (ct ConnectionType) Response() *http.Response {
	return ct.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ct ConnectionType) StatusCode() int {
	return ct.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ct ConnectionType) Status() string {
	return ct.rawResponse.Status
}

// ConnectionTypeAssociationProperty - The connection type property associated with the entity.
type ConnectionTypeAssociationProperty struct {
	// Name - Gets or sets the name of the connection type.
	Name *string `json:"name,omitempty"`
}

// ConnectionTypeCreateOrUpdateParameters - The parameters supplied to the create or update connection type operation.
type ConnectionTypeCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the connection type.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the value of the connection type.
	*ConnectionTypeCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ConnectionTypeCreateOrUpdateProperties - The properties of the create connection type.
type ConnectionTypeCreateOrUpdateProperties struct {
	// IsGlobal - Gets or sets a Boolean value to indicate if the connection type is global.
	IsGlobal *bool `json:"isGlobal,omitempty"`
	// FieldDefinitions - Gets or sets the field definitions of the connection type.
	FieldDefinitions map[string]FieldDefinition `json:"fieldDefinitions,omitempty"`
}

// ConnectionTypeListResult - The response model for the list connection type operation.
type ConnectionTypeListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of connection types.
	Value []ConnectionType `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ctlr ConnectionTypeListResult) Response() *http.Response {
	return ctlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ctlr ConnectionTypeListResult) StatusCode() int {
	return ctlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ctlr ConnectionTypeListResult) Status() string {
	return ctlr.rawResponse.Status
}

// ConnectionTypeProperties - Properties of the connection type.
type ConnectionTypeProperties struct {
	// IsGlobal - Gets or sets a Boolean value to indicate if the connection type is global.
	IsGlobal *bool `json:"isGlobal,omitempty"`
	// FieldDefinitions - Gets the field definitions of the connection type.
	FieldDefinitions map[string]FieldDefinition `json:"fieldDefinitions,omitempty"`
	// CreationTime - Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// ConnectionUpdateParameters - The parameters supplied to the update connection operation.
type ConnectionUpdateParameters struct {
	// Name - Gets or sets the name of the connection.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the connection.
	*ConnectionUpdateProperties `json:"properties,omitempty"`
}

// ConnectionUpdateProperties - The properties of the update connection operation.
type ConnectionUpdateProperties struct {
	// Description - Gets or sets the description of the connection.
	Description *string `json:"description,omitempty"`
	// FieldDefinitionValues - Gets or sets the field definition values of the connection.
	FieldDefinitionValues map[string]string `json:"fieldDefinitionValues,omitempty"`
}

// ContentHash - Definition of the runbook property type.
type ContentHash struct {
	// Algorithm - Gets or sets the content hash algorithm used to hash the content.
	Algorithm string `json:"algorithm,omitempty"`
	// Value - Gets or sets expected hash value of the content.
	Value string `json:"value,omitempty"`
}

// ContentLink - Definition of the content link.
type ContentLink struct {
	// URI - Gets or sets the uri of the runbook content.
	URI *string `json:"uri,omitempty"`
	// ContentHash - Gets or sets the hash.
	ContentHash *ContentHash `json:"contentHash,omitempty"`
	// Version - Gets or sets the version of the content.
	Version *string `json:"version,omitempty"`
}

// ContentSource - Definition of the content source.
type ContentSource struct {
	// Hash - Gets or sets the hash.
	Hash *ContentHash `json:"hash,omitempty"`
	// Type - Gets or sets the content source type. Possible values include: 'EmbeddedContent', 'URI', 'None'
	Type ContentSourceType `json:"type,omitempty"`
	// Value - Gets or sets the value of the content. This is based on the content source type.
	Value *string `json:"value,omitempty"`
	// Version - Gets or sets the version of the content.
	Version *string `json:"version,omitempty"`
}

// Credential - Definition of the credential.
type Credential struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the credential.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the credential.
	*CredentialProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (c Credential) Response() *http.Response {
	return c.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (c Credential) StatusCode() int {
	return c.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (c Credential) Status() string {
	return c.rawResponse.Status
}

// CredentialCreateOrUpdateParameters - The parameters supplied to the create or update credential operation.
type CredentialCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the credential.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the credential.
	*CredentialCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CredentialCreateOrUpdateProperties - The properties of the create cerdential operation.
type CredentialCreateOrUpdateProperties struct {
	// UserName - Gets or sets the user name of the credential.
	UserName string `json:"userName,omitempty"`
	// Password - Gets or sets the password of the credential.
	Password string `json:"password,omitempty"`
	// Description - Gets or sets the description of the credential.
	Description *string `json:"description,omitempty"`
}

// CredentialListResult - The response model for the list credential operation.
type CredentialListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of credentials.
	Value []Credential `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (clr CredentialListResult) Response() *http.Response {
	return clr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (clr CredentialListResult) StatusCode() int {
	return clr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (clr CredentialListResult) Status() string {
	return clr.rawResponse.Status
}

// CredentialProperties - Definition of the credential properties
type CredentialProperties struct {
	// UserName - Gets the user name of the credential.
	UserName *string `json:"userName,omitempty"`
	// CreationTime - Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// CredentialUpdateParameters - The parameters supplied to the Update credential operation.
type CredentialUpdateParameters struct {
	// Name - Gets or sets the name of the credential.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the variable.
	*CredentialUpdateProperties `json:"properties,omitempty"`
}

// CredentialUpdateProperties - The properties of the Update credential
type CredentialUpdateProperties struct {
	// UserName - Gets or sets the user name of the credential.
	UserName *string `json:"userName,omitempty"`
	// Password - Gets or sets the password of the credential.
	Password *string `json:"password,omitempty"`
	// Description - Gets or sets the description of the credential.
	Description *string `json:"description,omitempty"`
}

// DscCompilationJob - Definition of the Dsc Compilation job.
type DscCompilationJob struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the properties of the Dsc Compilation job.
	*DscCompilationJobProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dcj DscCompilationJob) Response() *http.Response {
	return dcj.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dcj DscCompilationJob) StatusCode() int {
	return dcj.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dcj DscCompilationJob) Status() string {
	return dcj.rawResponse.Status
}

// DscCompilationJobCreateParameters - The parameters supplied to the create compilation job operation.
type DscCompilationJobCreateParameters struct {
	// Properties - Gets or sets the list of compilation job properties.
	*DscCompilationJobCreateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// DscCompilationJobCreateProperties - The parameters supplied to the create compilation job operation.
type DscCompilationJobCreateProperties struct {
	// Configuration - Gets or sets the configuration.
	Configuration DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
	// NewNodeConfigurationBuildVersionRequired - If a new build version of NodeConfiguration is required.
	NewNodeConfigurationBuildVersionRequired *bool `json:"newNodeConfigurationBuildVersionRequired,omitempty"`
}

// DscCompilationJobListResult - The response model for the list job operation.
type DscCompilationJobListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of Dsc Compilation jobs.
	Value []DscCompilationJob `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dcjlr DscCompilationJobListResult) Response() *http.Response {
	return dcjlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dcjlr DscCompilationJobListResult) StatusCode() int {
	return dcjlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dcjlr DscCompilationJobListResult) Status() string {
	return dcjlr.rawResponse.Status
}

// DscCompilationJobProperties - Definition of Dsc Compilation job properties.
type DscCompilationJobProperties struct {
	// Configuration - Gets or sets the configuration.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	// StartedBy - Gets the compilation job started by.
	StartedBy *string `json:"startedBy,omitempty"`
	// JobID - Gets the id of the job.
	JobID *uuid.UUID `json:"jobId,omitempty"`
	// CreationTime - Gets the creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Status - Gets or sets the status of the job. Possible values include: 'New', 'Activating', 'Running', 'Completed', 'Failed', 'Stopped', 'Blocked', 'Suspended', 'Disconnected', 'Suspending', 'Stopping', 'Resuming', 'Removing', 'None'
	Status JobStatusType `json:"status,omitempty"`
	// StatusDetails - Gets or sets the status details of the job.
	StatusDetails *string `json:"statusDetails,omitempty"`
	// StartTime - Gets the start time of the job.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time of the job.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Exception - Gets the exception of the job.
	Exception *string `json:"exception,omitempty"`
	// LastModifiedTime - Gets the last modified time of the job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// LastStatusModifiedTime - Gets the last status modified time of the job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
}

// DscConfiguration - Definition of the configuration type.
type DscConfiguration struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the configuration properties.
	*DscConfigurationProperties `json:"properties,omitempty"`
	// Etag - Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (dc DscConfiguration) Response() *http.Response {
	return dc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dc DscConfiguration) StatusCode() int {
	return dc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dc DscConfiguration) Status() string {
	return dc.rawResponse.Status
}

// DscConfigurationAssociationProperty - The Dsc configuration property associated with the entity.
type DscConfigurationAssociationProperty struct {
	// Name - Gets or sets the name of the Dsc configuration.
	Name *string `json:"name,omitempty"`
}

// DscConfigurationCreateOrUpdateParameters - The parameters supplied to the create or update configuration operation.
type DscConfigurationCreateOrUpdateParameters struct {
	// Properties - Gets or sets configuration create or update properties.
	*DscConfigurationCreateOrUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// DscConfigurationCreateOrUpdateProperties - The properties to create or update configuration.
type DscConfigurationCreateOrUpdateProperties struct {
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// LogProgress - Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`
	// Source - Gets or sets the source.
	Source ContentSource `json:"source,omitempty"`
	// Parameters - Gets or sets the configuration parameters.
	Parameters map[string]DscConfigurationParameter `json:"parameters,omitempty"`
	// Description - Gets or sets the description of the configuration.
	Description *string `json:"description,omitempty"`
}

// DscConfigurationListResult - The response model for the list configuration operation.
type DscConfigurationListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of configurations.
	Value []DscConfiguration `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dclr DscConfigurationListResult) Response() *http.Response {
	return dclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dclr DscConfigurationListResult) StatusCode() int {
	return dclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dclr DscConfigurationListResult) Status() string {
	return dclr.rawResponse.Status
}

// DscConfigurationParameter - Definition of the configuration parameter type.
type DscConfigurationParameter struct {
	// Type - Gets or sets the type of the parameter.
	Type *string `json:"type,omitempty"`
	// IsMandatory - Gets or sets a Boolean value to indicate whether the parameter is madatory or not.
	IsMandatory *bool `json:"isMandatory,omitempty"`
	// Position - Get or sets the position of the parameter.
	Position *int32 `json:"position,omitempty"`
	// DefaultValue - Gets or sets the default value of parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`
}

// DscConfigurationProperties - Definition of the configuration property type.
type DscConfigurationProperties struct {
	// ProvisioningState - Gets or sets the provisioning state of the configuration. Possible values include: 'Succeeded', 'None'
	ProvisioningState DscConfigurationProvisioningStateType `json:"provisioningState,omitempty"`
	// JobCount - Gets or sets the job count of the configuration.
	JobCount *int32 `json:"jobCount,omitempty"`
	// Parameters - Gets or sets the configuration parameters.
	Parameters map[string]DscConfigurationParameter `json:"parameters,omitempty"`
	// Source - Gets or sets the source.
	Source *ContentSource `json:"source,omitempty"`
	// State - Gets or sets the state of the configuration. Possible values include: 'New', 'Edit', 'Published', 'None'
	State DscConfigurationStateType `json:"state,omitempty"`
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// DscMetaConfiguration - Definition of the DSC Meta Configuration.
type DscMetaConfiguration struct {
	// ConfigurationModeFrequencyMins - Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.
	ConfigurationModeFrequencyMins *int32 `json:"configurationModeFrequencyMins,omitempty"`
	// RebootNodeIfNeeded - Gets or sets the RebootNodeIfNeeded value of the meta configuration.
	RebootNodeIfNeeded *bool `json:"rebootNodeIfNeeded,omitempty"`
	// ConfigurationMode - Gets or sets the ConfigurationMode value of the meta configuration.
	ConfigurationMode *string `json:"configurationMode,omitempty"`
	// ActionAfterReboot - Gets or sets the ActionAfterReboot value of the meta configuration.
	ActionAfterReboot *string `json:"actionAfterReboot,omitempty"`
	// CertificateID - Gets or sets the CertificateId value of the meta configuration.
	CertificateID *string `json:"certificateId,omitempty"`
	// RefreshFrequencyMins - Gets or sets the RefreshFrequencyMins value of the meta configuration.
	RefreshFrequencyMins *int32 `json:"refreshFrequencyMins,omitempty"`
	// AllowModuleOverwrite - Gets or sets the AllowModuleOverwrite value of the meta configuration.
	AllowModuleOverwrite *bool `json:"allowModuleOverwrite,omitempty"`
}

// DscNode - Definition of the dsc node type.
type DscNode struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// LastSeen - Gets or sets the last seen time of the node.
	LastSeen *time.Time `json:"lastSeen,omitempty"`
	// RegistrationTime - Gets or sets the registration time of the node.
	RegistrationTime *time.Time `json:"registrationTime,omitempty"`
	// IP - Gets or sets the ip of the node.
	IP *string `json:"ip,omitempty"`
	// AccountID - Gets or sets the account id of the node.
	AccountID *string `json:"accountId,omitempty"`
	// NodeConfiguration - Gets or sets the configuration of the node.
	NodeConfiguration *DscNodeConfigurationAssociationProperty `json:"nodeConfiguration,omitempty"`
	// Status - Gets or sets the status of the node.
	Status *string `json:"status,omitempty"`
	// NodeID - Gets or sets the node id.
	NodeID *string `json:"nodeId,omitempty"`
	// Etag - Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`
	// ExtensionHandler - Gets or sets the list of extensionHandler properties for a Node.
	ExtensionHandler []DscNodeExtensionHandlerAssociationProperty `json:"extensionHandler,omitempty"`
}

// Response returns the raw HTTP response object.
func (dn DscNode) Response() *http.Response {
	return dn.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dn DscNode) StatusCode() int {
	return dn.rawResponse.StatusCode
}

// HTTPStatus returns the HTTP status message of the response, e.g. "200 OK".
func (dn DscNode) HTTPStatus() string {
	return dn.rawResponse.Status
}

// DscNodeConfiguration - Definition of the dsc node configuration.
type DscNodeConfiguration struct {
	rawResponse *http.Response
	// Name - Gets or sets the node configuration name.
	Name *string `json:"name,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// CreationTime - Gets or sets creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Configuration - Gets or sets the configuration of the node.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
}

// Response returns the raw HTTP response object.
func (dnc DscNodeConfiguration) Response() *http.Response {
	return dnc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnc DscNodeConfiguration) StatusCode() int {
	return dnc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnc DscNodeConfiguration) Status() string {
	return dnc.rawResponse.Status
}

// DscNodeConfigurationAssociationProperty - The dsc nodeconfiguration property associated with the entity.
type DscNodeConfigurationAssociationProperty struct {
	// Name - Gets or sets the name of the dsc nodeconfiguration.
	Name *string `json:"name,omitempty"`
}

// DscNodeConfigurationCreateOrUpdateParameters - The parameters supplied to the create or update node configuration
// operation.
type DscNodeConfigurationCreateOrUpdateParameters struct {
	// Source - Gets or sets the source.
	Source ContentSource `json:"source,omitempty"`
	// Name - Gets or sets the type of the parameter.
	Name string `json:"name,omitempty"`
	// Configuration - Gets or sets the configuration of the node.
	Configuration DscConfigurationAssociationProperty `json:"configuration,omitempty"`
	// NewNodeConfigurationBuildVersionRequired - If a new build version of NodeConfiguration is required.
	NewNodeConfigurationBuildVersionRequired *bool `json:"newNodeConfigurationBuildVersionRequired,omitempty"`
}

// DscNodeConfigurationListResult - The response model for the list job operation.
type DscNodeConfigurationListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of Dsc node configurations.
	Value []DscNodeConfiguration `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dnclr DscNodeConfigurationListResult) Response() *http.Response {
	return dnclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnclr DscNodeConfigurationListResult) StatusCode() int {
	return dnclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnclr DscNodeConfigurationListResult) Status() string {
	return dnclr.rawResponse.Status
}

// DscNodeExtensionHandlerAssociationProperty - The dsc extensionHandler property associated with the node
type DscNodeExtensionHandlerAssociationProperty struct {
	// Name - Gets or sets the name of the extension handler.
	Name *string `json:"name,omitempty"`
	// Version - Gets or sets the version of the extension handler.
	Version *string `json:"version,omitempty"`
}

// DscNodeListResult - The response model for the list dsc nodes operation.
type DscNodeListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of dsc nodes.
	Value []DscNode `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dnlr DscNodeListResult) Response() *http.Response {
	return dnlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnlr DscNodeListResult) StatusCode() int {
	return dnlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnlr DscNodeListResult) Status() string {
	return dnlr.rawResponse.Status
}

// DscNodeReport - Definition of the dsc node report type.
type DscNodeReport struct {
	rawResponse *http.Response
	// EndTime - Gets or sets the end time of the node report.
	EndTime *time.Time `json:"endTime,omitempty"`
	// LastModifiedTime - Gets or sets the lastModifiedTime of the node report.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// StartTime - Gets or sets the start time of the node report.
	StartTime *time.Time `json:"startTime,omitempty"`
	// Type - Gets or sets the type of the node report.
	Type *string `json:"type,omitempty"`
	// ReportID - Gets or sets the id of the node report.
	ReportID *string `json:"reportId,omitempty"`
	// Status - Gets or sets the status of the node report.
	Status *string `json:"status,omitempty"`
	// RefreshMode - Gets or sets the refreshMode of the node report.
	RefreshMode *string `json:"refreshMode,omitempty"`
	// RebootRequested - Gets or sets the rebootRequested of the node report.
	RebootRequested *string `json:"rebootRequested,omitempty"`
	// ReportFormatVersion - Gets or sets the reportFormatVersion of the node report.
	ReportFormatVersion *string `json:"reportFormatVersion,omitempty"`
	// ConfigurationVersion - Gets or sets the configurationVersion of the node report.
	ConfigurationVersion *string `json:"configurationVersion,omitempty"`
	// ID - Gets or sets the id.
	ID *string `json:"id,omitempty"`
	// Errors - Gets or sets the errors for the node report.
	Errors []DscReportError `json:"errors,omitempty"`
	// Resources - Gets or sets the resource for the node report.
	Resources []DscReportResource `json:"resources,omitempty"`
	// MetaConfiguration - Gets or sets the metaConfiguration of the node at the time of the report.
	MetaConfiguration *DscMetaConfiguration `json:"metaConfiguration,omitempty"`
	// HostName - Gets or sets the hostname of the node that sent the report.
	HostName *string `json:"hostName,omitempty"`
	// IPV4Addresses - Gets or sets the IPv4 address of the node that sent the report.
	IPV4Addresses []string `json:"iPV4Addresses,omitempty"`
	// IPV6Addresses - Gets or sets the IPv6 address of the node that sent the report.
	IPV6Addresses []string `json:"iPV6Addresses,omitempty"`
	// NumberOfResources - Gets or sets the number of resource in the node report.
	NumberOfResources *int32 `json:"numberOfResources,omitempty"`
	// RawErrors - Gets or sets the unparsed errors for the node report.
	RawErrors *string `json:"rawErrors,omitempty"`
}

// Response returns the raw HTTP response object.
func (dnr DscNodeReport) Response() *http.Response {
	return dnr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnr DscNodeReport) StatusCode() int {
	return dnr.rawResponse.StatusCode
}

// HTTPStatus returns the HTTP status message of the response, e.g. "200 OK".
func (dnr DscNodeReport) HTTPStatus() string {
	return dnr.rawResponse.Status
}

// DscNodeReportListResult - The response model for the list dsc nodes operation.
type DscNodeReportListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of dsc node reports.
	Value []DscNodeReport `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dnrlr DscNodeReportListResult) Response() *http.Response {
	return dnrlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnrlr DscNodeReportListResult) StatusCode() int {
	return dnrlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnrlr DscNodeReportListResult) Status() string {
	return dnrlr.rawResponse.Status
}

// DscNodeUpdateParameters - The parameters supplied to the update dsc node operation.
type DscNodeUpdateParameters struct {
	// NodeID - Gets or sets the id of the dsc node.
	NodeID *string `json:"nodeId,omitempty"`
	// NodeConfiguration - Gets or sets the configuration of the node.
	NodeConfiguration *DscNodeConfigurationAssociationProperty `json:"nodeConfiguration,omitempty"`
}

// DscReportError - Definition of the dsc node report error type.
type DscReportError struct {
	// ErrorSource - Gets or sets the source of the error.
	ErrorSource *string `json:"errorSource,omitempty"`
	// ResourceID - Gets or sets the resource ID which generated the error.
	ResourceID *string `json:"resourceId,omitempty"`
	// ErrorCode - Gets or sets the error code.
	ErrorCode *string `json:"errorCode,omitempty"`
	// ErrorMessage - Gets or sets the error message.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Locale - Gets or sets the locale of the error.
	Locale *string `json:"locale,omitempty"`
	// ErrorDetails - Gets or sets the error details.
	ErrorDetails *string `json:"errorDetails,omitempty"`
}

// DscReportResource - Definition of the DSC Report Resource.
type DscReportResource struct {
	// ResourceID - Gets or sets the ID of the resource.
	ResourceID *string `json:"resourceId,omitempty"`
	// SourceInfo - Gets or sets the source info of the resource.
	SourceInfo *string `json:"sourceInfo,omitempty"`
	// DependsOn - Gets or sets the Resource Navigation values for resources the resource depends on.
	DependsOn []DscReportResourceNavigation `json:"dependsOn,omitempty"`
	// ModuleName - Gets or sets the module name of the resource.
	ModuleName *string `json:"moduleName,omitempty"`
	// ModuleVersion - Gets or sets the module version of the resource.
	ModuleVersion *string `json:"moduleVersion,omitempty"`
	// ResourceName - Gets or sets the name of the resource.
	ResourceName *string `json:"resourceName,omitempty"`
	// Error - Gets or sets the error of the resource.
	Error *string `json:"error,omitempty"`
	// Status - Gets or sets the status of the resource.
	Status *string `json:"status,omitempty"`
	// DurationInSeconds - Gets or sets the duration in seconds for the resource.
	DurationInSeconds *float64 `json:"durationInSeconds,omitempty"`
	// StartDate - Gets or sets the start date of the resource.
	StartDate *time.Time `json:"startDate,omitempty"`
}

// DscReportResourceNavigation - Navigation for DSC Report Resource.
type DscReportResourceNavigation struct {
	// ResourceID - Gets or sets the ID of the resource to navigate to.
	ResourceID *string `json:"resourceId,omitempty"`
}

// ErrorResponse - Error response of an operation failure
type ErrorResponse struct {
	// Code - Error code
	Code *string `json:"code,omitempty"`
	// Message - Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// FieldDefinition - Definition of the connection fields.
type FieldDefinition struct {
	// IsEncrypted - Gets or sets the isEncrypted flag of the connection field definition.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// IsOptional - Gets or sets the isOptional flag of the connection field definition.
	IsOptional *bool `json:"isOptional,omitempty"`
	// Type - Gets or sets the type of the connection field definition.
	Type string `json:"type,omitempty"`
}

// GenerateURIResponse ...
type GenerateURIResponse struct {
	rawResponse *http.Response
	Value       *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gur GenerateURIResponse) Response() *http.Response {
	return gur.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gur GenerateURIResponse) StatusCode() int {
	return gur.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gur GenerateURIResponse) Status() string {
	return gur.rawResponse.Status
}

// GetContentResponse ...
type GetContentResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (gcr GetContentResponse) Response() *http.Response {
	return gcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gcr GetContentResponse) StatusCode() int {
	return gcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gcr GetContentResponse) Status() string {
	return gcr.rawResponse.Status
}

// Body returns the raw HTTP response object's Body.
func (gcr GetContentResponse) Body() io.ReadCloser {
	return gcr.rawResponse.Body
}

// GetOutputResponse ...
type GetOutputResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (gor GetOutputResponse) Response() *http.Response {
	return gor.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gor GetOutputResponse) StatusCode() int {
	return gor.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gor GetOutputResponse) Status() string {
	return gor.rawResponse.Status
}

// Body returns the raw HTTP response object's Body.
func (gor GetOutputResponse) Body() io.ReadCloser {
	return gor.rawResponse.Body
}

// GetRunbookContentResponse ...
type GetRunbookContentResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (grcr GetRunbookContentResponse) Response() *http.Response {
	return grcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (grcr GetRunbookContentResponse) StatusCode() int {
	return grcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (grcr GetRunbookContentResponse) Status() string {
	return grcr.rawResponse.Status
}

// Body returns the raw HTTP response object's Body.
func (grcr GetRunbookContentResponse) Body() io.ReadCloser {
	return grcr.rawResponse.Body
}

// HybridRunbookWorker - Definition of hybrid runbook worker.
type HybridRunbookWorker struct {
	// Name - Gets or sets the worker machine name.
	Name *string `json:"name,omitempty"`
	// IP - Gets or sets the assigned machine IP address.
	IP *string `json:"ip,omitempty"`
	// RegistrationTime - Gets or sets the registration time of the worker machine.
	RegistrationTime *time.Time `json:"registrationTime,omitempty"`
}

// HybridRunbookWorkerGroup - Definition of hybrid runbook worker group.
type HybridRunbookWorkerGroup struct {
	rawResponse *http.Response
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets or sets the name of the group.
	Name *string `json:"name,omitempty"`
	// HybridRunbookWorkers - Gets or sets the list of hybrid runbook workers.
	HybridRunbookWorkers []HybridRunbookWorker `json:"hybridRunbookWorkers,omitempty"`
	// Credential - Sets the credential of a worker group.
	Credential *RunAsCredentialAssociationProperty `json:"credential,omitempty"`
}

// Response returns the raw HTTP response object.
func (hrwg HybridRunbookWorkerGroup) Response() *http.Response {
	return hrwg.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (hrwg HybridRunbookWorkerGroup) StatusCode() int {
	return hrwg.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (hrwg HybridRunbookWorkerGroup) Status() string {
	return hrwg.rawResponse.Status
}

// HybridRunbookWorkerGroupsListResult - The response model for the list hybrid runbook worker groups.
type HybridRunbookWorkerGroupsListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of hybrid runbook worker groups.
	Value []HybridRunbookWorkerGroup `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (hrwglr HybridRunbookWorkerGroupsListResult) Response() *http.Response {
	return hrwglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (hrwglr HybridRunbookWorkerGroupsListResult) StatusCode() int {
	return hrwglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (hrwglr HybridRunbookWorkerGroupsListResult) Status() string {
	return hrwglr.rawResponse.Status
}

// HybridRunbookWorkerGroupUpdateParameters - Parameters supplied to the update operation.
type HybridRunbookWorkerGroupUpdateParameters struct {
	// Credential - Sets the credential of a worker group.
	Credential *RunAsCredentialAssociationProperty `json:"credential,omitempty"`
}

// Job - Definition of the job.
type Job struct {
	rawResponse *http.Response
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the properties of the job.
	*JobProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (j Job) Response() *http.Response {
	return j.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (j Job) StatusCode() int {
	return j.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (j Job) Status() string {
	return j.rawResponse.Status
}

// JobCreateParameters - The parameters supplied to the create job operation.
type JobCreateParameters struct {
	// Properties - Gets or sets the list of job properties.
	*JobCreateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// JobCreateProperties - The parameters supplied to the create job operation.
type JobCreateProperties struct {
	// Runbook - Gets or sets the runbook.
	Runbook RunbookAssociationProperty `json:"runbook,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
	// RunOn - Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`
}

// JobListResult - The response model for the list job operation.
type JobListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of jobs.
	Value []Job `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (jlr JobListResult) Response() *http.Response {
	return jlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (jlr JobListResult) StatusCode() int {
	return jlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (jlr JobListResult) Status() string {
	return jlr.rawResponse.Status
}

// JobProperties - Definition of job properties.
type JobProperties struct {
	// Runbook - Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`
	// StartedBy - Gets or sets the job started by.
	StartedBy *string `json:"startedBy,omitempty"`
	// RunOn - Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`
	// JobID - Gets or sets the id of the job.
	JobID *uuid.UUID `json:"jobId,omitempty"`
	// CreationTime - Gets or sets the creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Status - Gets or sets the status of the job. Possible values include: 'New', 'Activating', 'Running', 'Completed', 'Failed', 'Stopped', 'Blocked', 'Suspended', 'Disconnected', 'Suspending', 'Stopping', 'Resuming', 'Removing', 'None'
	Status JobStatusType `json:"status,omitempty"`
	// StatusDetails - Gets or sets the status details of the job.
	StatusDetails *string `json:"statusDetails,omitempty"`
	// StartTime - Gets or sets the start time of the job.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets or sets the end time of the job.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Exception - Gets or sets the exception of the job.
	Exception *string `json:"exception,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time of the job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// LastStatusModifiedTime - Gets or sets the last status modified time of the job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
}

// JobSchedule - Definition of the job schedule.
type JobSchedule struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the variable.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the job schedule.
	*JobScheduleProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (js JobSchedule) Response() *http.Response {
	return js.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (js JobSchedule) StatusCode() int {
	return js.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (js JobSchedule) Status() string {
	return js.rawResponse.Status
}

// JobScheduleCreateParameters - The parameters supplied to the create job schedule operation.
type JobScheduleCreateParameters struct {
	// Properties - Gets or sets the list of job schedule properties.
	*JobScheduleCreateProperties `json:"properties,omitempty"`
}

// JobScheduleCreateProperties - The parameters supplied to the create job schedule operation.
type JobScheduleCreateProperties struct {
	// Schedule - Gets or sets the schedule.
	Schedule ScheduleAssociationProperty `json:"schedule,omitempty"`
	// Runbook - Gets or sets the runbook.
	Runbook RunbookAssociationProperty `json:"runbook,omitempty"`
	// RunOn - Gets or sets the hybrid worker group that the scheduled job should run on.
	RunOn *string `json:"runOn,omitempty"`
	// Parameters - Gets or sets a list of job properties.
	Parameters map[string]string `json:"parameters,omitempty"`
}

// JobScheduleListResult - The response model for the list job schedule operation.
type JobScheduleListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of job schedules.
	Value []JobSchedule `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (jslr JobScheduleListResult) Response() *http.Response {
	return jslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (jslr JobScheduleListResult) StatusCode() int {
	return jslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (jslr JobScheduleListResult) Status() string {
	return jslr.rawResponse.Status
}

// JobScheduleProperties - Definition of job schedule parameters.
type JobScheduleProperties struct {
	// JobScheduleID - Gets or sets the id of job schedule.
	JobScheduleID *string `json:"jobScheduleId,omitempty"`
	// Schedule - Gets or sets the schedule.
	Schedule *ScheduleAssociationProperty `json:"schedule,omitempty"`
	// Runbook - Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`
	// RunOn - Gets or sets the hybrid worker group that the scheduled job should run on.
	RunOn *string `json:"runOn,omitempty"`
	// Parameters - Gets or sets the parameters of the job schedule.
	Parameters map[string]string `json:"parameters,omitempty"`
}

// JobStream - Definition of the job stream.
type JobStream struct {
	rawResponse *http.Response
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the id of the job stream.
	*JobStreamProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (js JobStream) Response() *http.Response {
	return js.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (js JobStream) StatusCode() int {
	return js.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (js JobStream) Status() string {
	return js.rawResponse.Status
}

// JobStreamListResult - The response model for the list job stream operation.
type JobStreamListResult struct {
	rawResponse *http.Response
	// Value - A list of job streams.
	Value []JobStream `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (jslr JobStreamListResult) Response() *http.Response {
	return jslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (jslr JobStreamListResult) StatusCode() int {
	return jslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (jslr JobStreamListResult) Status() string {
	return jslr.rawResponse.Status
}

// JobStreamProperties - Definition of the job stream.
type JobStreamProperties struct {
	// JobStreamID - Gets or sets the id of the job stream.
	JobStreamID *string `json:"jobStreamId,omitempty"`
	// Time - Gets or sets the creation time of the job.
	Time *time.Time `json:"time,omitempty"`
	// StreamType - Gets or sets the stream type. Possible values include: 'Progress', 'Output', 'Warning', 'Error', 'Debug', 'Verbose', 'Any', 'None'
	StreamType JobStreamType `json:"streamType,omitempty"`
	// StreamText - Gets or sets the stream text.
	StreamText *string `json:"streamText,omitempty"`
	// Summary - Gets or sets the summary.
	Summary *string `json:"summary,omitempty"`
	// Value - Gets or sets the values of the job stream.
	Value map[string]map[string]interface{} `json:"value,omitempty"`
}

// Module - Definition of the module type.
type Module struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the module properties.
	*ModuleProperties `json:"properties,omitempty"`
	// Etag - Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (m Module) Response() *http.Response {
	return m.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (m Module) StatusCode() int {
	return m.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (m Module) Status() string {
	return m.rawResponse.Status
}

// ModuleCreateOrUpdateParameters - The parameters supplied to the create or update module operation.
type ModuleCreateOrUpdateParameters struct {
	// Properties - Gets or sets the module create properties.
	*ModuleCreateOrUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// ModuleCreateOrUpdateProperties - The parameters supplied to the create or update module properties.
type ModuleCreateOrUpdateProperties struct {
	// ContentLink - Gets or sets the module content link.
	ContentLink ContentLink `json:"contentLink,omitempty"`
}

// ModuleErrorInfo - Definition of the module error info type.
type ModuleErrorInfo struct {
	// Code - Gets or sets the error code.
	Code *string `json:"code,omitempty"`
	// Message - Gets or sets the error message.
	Message *string `json:"message,omitempty"`
}

// ModuleListResult - The response model for the list module operation.
type ModuleListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of modules.
	Value []Module `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (mlr ModuleListResult) Response() *http.Response {
	return mlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (mlr ModuleListResult) StatusCode() int {
	return mlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (mlr ModuleListResult) Status() string {
	return mlr.rawResponse.Status
}

// ModuleProperties - Definition of the module property type.
type ModuleProperties struct {
	// IsGlobal - Gets or sets the isGlobal flag of the module.
	IsGlobal *bool `json:"isGlobal,omitempty"`
	// Version - Gets or sets the version of the module.
	Version *string `json:"version,omitempty"`
	// SizeInBytes - Gets or sets the size in bytes of the module.
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`
	// ActivityCount - Gets or sets the activity count of the module.
	ActivityCount *int32 `json:"activityCount,omitempty"`
	// ProvisioningState - Gets or sets the provisioning state of the module. Possible values include: 'Created', 'Creating', 'StartingImportModuleRunbook', 'RunningImportModuleRunbook', 'ContentRetrieved', 'ContentDownloaded', 'ContentValidated', 'ConnectionTypeImported', 'ContentStored', 'ModuleDataStored', 'ActivitiesStored', 'ModuleImportRunbookComplete', 'Succeeded', 'Failed', 'Cancelled', 'Updating', 'None'
	ProvisioningState ModuleProvisioningStateType `json:"provisioningState,omitempty"`
	// ContentLink - Gets or sets the contentLink of the module.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
	// Error - Gets or sets the error info of the module.
	Error *ModuleErrorInfo `json:"error,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// ModuleUpdateParameters - The parameters supplied to the update module operation.
type ModuleUpdateParameters struct {
	// Properties - Gets or sets the module update properties.
	*ModuleUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// ModuleUpdateProperties - The parameters supplied to the update properties.
type ModuleUpdateProperties struct {
	// ContentLink - Gets or sets the module content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
}

// Operation - Automation REST API operation
type Operation struct {
	// Name - Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
	// Display - Provider, Resource and Operation values
	Display *OperationDisplay `json:"display,omitempty"`
}

// OperationDisplay - Provider, Resource and Operation values
type OperationDisplay struct {
	// Provider - Service provider: Microsoft.Automation
	Provider *string `json:"provider,omitempty"`
	// Resource - Resource on which the operation is performed: Runbooks, Jobs etc.
	Resource *string `json:"resource,omitempty"`
	// Operation - Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`
}

// OperationListResult - The response model for the list of Automation operations
type OperationListResult struct {
	rawResponse *http.Response
	// Value - List of Automation operations supported by the Automation resource provider.
	Value []Operation `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// Resource - The Resource definition.
type Resource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
}

// RunAsCredentialAssociationProperty - Definition of runas credential to use for hybrid worker.
type RunAsCredentialAssociationProperty struct {
	// Name - Gets or sets the name of the credential.
	Name *string `json:"name,omitempty"`
}

// Runbook - Definition of the runbook type.
type Runbook struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the runbook properties.
	*RunbookProperties `json:"properties,omitempty"`
	// Etag - Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Runbook) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Runbook) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Runbook) Status() string {
	return r.rawResponse.Status
}

// RunbookAssociationProperty - The runbook property associated with the entity.
type RunbookAssociationProperty struct {
	// Name - Gets or sets the name of the runbook.
	Name *string `json:"name,omitempty"`
}

// RunbookCreateOrUpdateDraftParameters - The parameters supplied to the create or update runbook operation.
type RunbookCreateOrUpdateDraftParameters struct {
	// RunbookContent - Content of the Runbook.
	RunbookContent string `json:"runbookContent,omitempty"`
}

// RunbookCreateOrUpdateDraftProperties - The parameters supplied to the create or update dratft runbook properties.
type RunbookCreateOrUpdateDraftProperties struct {
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// LogProgress - Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`
	// RunbookType - Gets or sets the type of the runbook. Possible values include: 'Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell', 'None'
	RunbookType RunbookTypeEnumType `json:"runbookType,omitempty"`
	// Draft - Gets or sets the draft runbook properties.
	Draft RunbookDraft `json:"draft,omitempty"`
	// Description - Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`
	// LogActivityTrace - Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`
}

// RunbookCreateOrUpdateParameters - The parameters supplied to the create or update runbook operation.
type RunbookCreateOrUpdateParameters struct {
	// Properties - Gets or sets runbook create or update properties.
	*RunbookCreateOrUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// RunbookCreateOrUpdateProperties - The parameters supplied to the create or update runbook properties.
type RunbookCreateOrUpdateProperties struct {
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// LogProgress - Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`
	// RunbookType - Gets or sets the type of the runbook. Possible values include: 'Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell', 'None'
	RunbookType RunbookTypeEnumType `json:"runbookType,omitempty"`
	// Draft - Gets or sets the draft runbook properties.
	Draft *RunbookDraft `json:"draft,omitempty"`
	// PublishContentLink - Gets or sets the published runbook content link.
	PublishContentLink *ContentLink `json:"publishContentLink,omitempty"`
	// Description - Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`
	// LogActivityTrace - Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`
}

// RunbookDraft - Definition of the runbook type.
type RunbookDraft struct {
	rawResponse *http.Response
	// InEdit - Gets or sets whether runbook is in edit mode.
	InEdit *bool `json:"inEdit,omitempty"`
	// DraftContentLink - Gets or sets the draft runbook content link.
	DraftContentLink *ContentLink `json:"draftContentLink,omitempty"`
	// CreationTime - Gets or sets the creation time of the runbook draft.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time of the runbook draft.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Parameters - Gets or sets the runbook draft parameters.
	Parameters map[string]RunbookParameter `json:"parameters,omitempty"`
	// OutputTypes - Gets or sets the runbook output types.
	OutputTypes []string `json:"outputTypes,omitempty"`
}

// Response returns the raw HTTP response object.
func (rd RunbookDraft) Response() *http.Response {
	return rd.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rd RunbookDraft) StatusCode() int {
	return rd.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rd RunbookDraft) Status() string {
	return rd.rawResponse.Status
}

// RunbookDraftUndoEditResult - The response model for the undoedit runbook operation.
type RunbookDraftUndoEditResult struct {
	rawResponse *http.Response
	// StatusCode - Possible values include: 'Continue', 'SwitchingProtocols', 'OK', 'Created', 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent', 'PartialContent', 'MultipleChoices', 'Ambiguous', 'MovedPermanently', 'Moved', 'Found', 'Redirect', 'SeeOther', 'RedirectMethod', 'NotModified', 'UseProxy', 'Unused', 'TemporaryRedirect', 'RedirectKeepVerb', 'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound', 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired', 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired', 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestURITooLong', 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed', 'UpgradeRequired', 'InternalServerError', 'NotImplemented', 'BadGateway', 'ServiceUnavailable', 'GatewayTimeout', 'HTTPVersionNotSupported', 'None'
	StatusCode HTTPStatusCodeType `json:"statusCode,omitempty"`
	RequestID  *string            `json:"requestId,omitempty"`
}

// Response returns the raw HTTP response object.
func (rduer RunbookDraftUndoEditResult) Response() *http.Response {
	return rduer.rawResponse
}

// HTTPStatusCode returns the HTTP status code of the response, e.g. 200.
func (rduer RunbookDraftUndoEditResult) HTTPStatusCode() int {
	return rduer.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rduer RunbookDraftUndoEditResult) Status() string {
	return rduer.rawResponse.Status
}

// RunbookListResult - The response model for the list runbook operation.
type RunbookListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of runbooks.
	Value []Runbook `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr RunbookListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr RunbookListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr RunbookListResult) Status() string {
	return rlr.rawResponse.Status
}

// RunbookParameter - Definition of the runbook parameter type.
type RunbookParameter struct {
	// Type - Gets or sets the type of the parameter.
	Type *string `json:"type,omitempty"`
	// IsMandatory - Gets or sets a Boolean value to indicate whether the parameter is madatory or not.
	IsMandatory *bool `json:"isMandatory,omitempty"`
	// Position - Get or sets the position of the parameter.
	Position *int32 `json:"position,omitempty"`
	// DefaultValue - Gets or sets the default value of parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`
}

// RunbookProperties - Definition of the runbook property type.
type RunbookProperties struct {
	// RunbookType - Gets or sets the type of the runbook. Possible values include: 'Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell', 'None'
	RunbookType RunbookTypeEnumType `json:"runbookType,omitempty"`
	// PublishContentLink - Gets or sets the published runbook content link.
	PublishContentLink *ContentLink `json:"publishContentLink,omitempty"`
	// State - Gets or sets the state of the runbook. Possible values include: 'New', 'Edit', 'Published', 'None'
	State RunbookStateType `json:"state,omitempty"`
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// LogProgress - Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`
	// LogActivityTrace - Gets or sets the option to log activity trace of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`
	// JobCount - Gets or sets the job count of the runbook.
	JobCount *int32 `json:"jobCount,omitempty"`
	// Parameters - Gets or sets the runbook parameters.
	Parameters map[string]RunbookParameter `json:"parameters,omitempty"`
	// OutputTypes - Gets or sets the runbook output types.
	OutputTypes []string `json:"outputTypes,omitempty"`
	// Draft - Gets or sets the draft runbook properties.
	Draft *RunbookDraft `json:"draft,omitempty"`
	// ProvisioningState - Gets or sets the provisioning state of the runbook. Possible values include: 'Succeeded', 'None'
	ProvisioningState RunbookProvisioningStateType `json:"provisioningState,omitempty"`
	// LastModifiedBy - Gets or sets the last modified by.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// RunbookUpdateParameters - The parameters supplied to the update runbook operation.
type RunbookUpdateParameters struct {
	// Properties - Gets or sets the runbook update properties.
	*RunbookUpdateProperties `json:"properties,omitempty"`
	// Name - Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`
	// Location - Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the tags attached to the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

// RunbookUpdateProperties - The parameters supplied to the update runbook properties.
type RunbookUpdateProperties struct {
	// Description - Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`
	// LogVerbose - Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
	// LogProgress - Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`
	// LogActivityTrace - Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`
}

// Schedule - Definition of the schedule.
type Schedule struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets name of the schedule.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the schedule.
	*ScheduleProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (s Schedule) Response() *http.Response {
	return s.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (s Schedule) StatusCode() int {
	return s.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (s Schedule) Status() string {
	return s.rawResponse.Status
}

// ScheduleAssociationProperty - The schedule property associated with the entity.
type ScheduleAssociationProperty struct {
	// Name - Gets or sets the name of the schedule.
	Name *string `json:"name,omitempty"`
}

// ScheduleCreateOrUpdateParameters - The parameters supplied to the create or update schedule operation.
type ScheduleCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the schedule.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the list of schedule properties.
	*ScheduleCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ScheduleCreateOrUpdateProperties - The parameters supplied to the create or update schedule operation.
type ScheduleCreateOrUpdateProperties struct {
	// Description - Gets or sets the description of the schedule.
	Description *string `json:"description,omitempty"`
	// StartTime - Gets or sets the start time of the schedule.
	StartTime time.Time `json:"startTime,omitempty"`
	// ExpiryTime - Gets or sets the end time of the schedule.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	// Interval - Gets or sets the interval of the schedule.
	Interval map[string]interface{} `json:"interval,omitempty"`
	// Frequency - Possible values include: 'OneTime', 'Day', 'Hour', 'Week', 'Month', 'None'
	Frequency ScheduleFrequencyType `json:"frequency,omitempty"`
	// TimeZone - Gets or sets the time zone of the schedule.
	TimeZone *string `json:"timeZone,omitempty"`
	// AdvancedSchedule - Gets or sets the AdvancedSchedule.
	AdvancedSchedule *AdvancedSchedule `json:"advancedSchedule,omitempty"`
}

// ScheduleListResult - The response model for the list schedule operation.
type ScheduleListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of schedules.
	Value []Schedule `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (slr ScheduleListResult) Response() *http.Response {
	return slr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (slr ScheduleListResult) StatusCode() int {
	return slr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (slr ScheduleListResult) Status() string {
	return slr.rawResponse.Status
}

// ScheduleProperties - Definition of schedule parameters.
type ScheduleProperties struct {
	// StartTime - Gets or sets the start time of the schedule.
	StartTime *time.Time `json:"startTime,omitempty"`
	// StartTimeOffsetMinutes - Gets the start time's offset in minutes.
	StartTimeOffsetMinutes *float64 `json:"startTimeOffsetMinutes,omitempty"`
	// ExpiryTime - Gets or sets the end time of the schedule.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	// ExpiryTimeOffsetMinutes - Gets or sets the expiry time's offset in minutes.
	ExpiryTimeOffsetMinutes *float64 `json:"expiryTimeOffsetMinutes,omitempty"`
	// IsEnabled - Gets or sets a value indicating whether this schedule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// NextRun - Gets or sets the next run time of the schedule.
	NextRun *time.Time `json:"nextRun,omitempty"`
	// NextRunOffsetMinutes - Gets or sets the next run time's offset in minutes.
	NextRunOffsetMinutes *float64 `json:"nextRunOffsetMinutes,omitempty"`
	// Interval - Gets or sets the interval of the schedule.
	Interval map[string]interface{} `json:"interval,omitempty"`
	// Frequency - Gets or sets the frequency of the schedule. Possible values include: 'OneTime', 'Day', 'Hour', 'Week', 'Month', 'None'
	Frequency ScheduleFrequencyType `json:"frequency,omitempty"`
	// TimeZone - Gets or sets the time zone of the schedule.
	TimeZone *string `json:"timeZone,omitempty"`
	// AdvancedSchedule - Gets or sets the advanced schedule.
	AdvancedSchedule *AdvancedSchedule `json:"advancedSchedule,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// ScheduleUpdateParameters - The parameters supplied to the update schedule operation.
type ScheduleUpdateParameters struct {
	// Name - Gets or sets the name of the schedule.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the list of schedule properties.
	*ScheduleUpdateProperties `json:"properties,omitempty"`
}

// ScheduleUpdateProperties - The parameters supplied to the update schedule operation.
type ScheduleUpdateProperties struct {
	// Description - Gets or sets the description of the schedule.
	Description *string `json:"description,omitempty"`
	// IsEnabled - Gets or sets a value indicating whether this schedule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// Sku - The account SKU.
type Sku struct {
	// Name - Gets or sets the SKU name of the account. Possible values include: 'Free', 'Basic', 'None'
	Name SkuNameEnumType `json:"name,omitempty"`
	// Family - Gets or sets the SKU family.
	Family *string `json:"family,omitempty"`
	// Capacity - Gets or sets the SKU capacity.
	Capacity *int32 `json:"capacity,omitempty"`
}

// Statistics - Definition of the statistic.
type Statistics struct {
	// CounterProperty - Gets the property value of the statistic.
	CounterProperty *string `json:"counterProperty,omitempty"`
	// CounterValue - Gets the value of the statistic.
	CounterValue *int64 `json:"counterValue,omitempty"`
	// StartTime - Gets the startTime of the statistic.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the endTime of the statistic.
	EndTime *time.Time `json:"endTime,omitempty"`
	// ID - Gets the id.
	ID *string `json:"id,omitempty"`
}

// StatisticsListResult - The response model for the list statistics operation.
type StatisticsListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of statistics.
	Value []Statistics `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (slr StatisticsListResult) Response() *http.Response {
	return slr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (slr StatisticsListResult) StatusCode() int {
	return slr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (slr StatisticsListResult) Status() string {
	return slr.rawResponse.Status
}

// SubResource - The Sub Resource definition.
type SubResource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
}

// TestJob - Definition of the test job.
type TestJob struct {
	rawResponse *http.Response
	// CreationTime - Gets or sets the creation time of the test job.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Status - Gets or sets the status of the test job.
	Status *string `json:"status,omitempty"`
	// StatusDetails - Gets or sets the status details of the test job.
	StatusDetails *string `json:"statusDetails,omitempty"`
	// RunOn - Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`
	// StartTime - Gets or sets the start time of the test job.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets or sets the end time of the test job.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Exception - Gets or sets the exception of the test job.
	Exception *string `json:"exception,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time of the test job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// LastStatusModifiedTime - Gets or sets the last status modified time of the test job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty"`
	// Parameters - Gets or sets the parameters of the test job.
	Parameters map[string]string `json:"parameters,omitempty"`
}

// Response returns the raw HTTP response object.
func (tj TestJob) Response() *http.Response {
	return tj.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (tj TestJob) StatusCode() int {
	return tj.rawResponse.StatusCode
}

// HTTPStatus returns the HTTP status message of the response, e.g. "200 OK".
func (tj TestJob) HTTPStatus() string {
	return tj.rawResponse.Status
}

// TestJobCreateParameters - The parameters supplied to the create test job operation.
type TestJobCreateParameters struct {
	// RunbookName - Gets or sets the runbook name.
	RunbookName string `json:"runbookName,omitempty"`
	// Parameters - Gets or sets the parameters of the test job.
	Parameters map[string]string `json:"parameters,omitempty"`
	// RunOn - Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`
}

// TypeField - Information about a field of a type.
type TypeField struct {
	// Name - Gets or sets the name of the field.
	Name *string `json:"name,omitempty"`
	// Type - Gets or sets the type of the field.
	Type *string `json:"type,omitempty"`
}

// TypeFieldListResult - The response model for the list fields operation.
type TypeFieldListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of fields.
	Value []TypeField `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (tflr TypeFieldListResult) Response() *http.Response {
	return tflr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (tflr TypeFieldListResult) StatusCode() int {
	return tflr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (tflr TypeFieldListResult) Status() string {
	return tflr.rawResponse.Status
}

// Usage - Definition of Usage.
type Usage struct {
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets or sets the usage counter name.
	Name *UsageCounterName `json:"name,omitempty"`
	// Unit - Gets or sets the usage unit name.
	Unit *string `json:"unit,omitempty"`
	// CurrentValue - Gets or sets the current usage value.
	CurrentValue *float64 `json:"currentValue,omitempty"`
	// Limit - Gets or sets max limit. -1 for unlimited
	Limit *int64 `json:"limit,omitempty"`
	// ThrottleStatus - Gets or sets the throttle status.
	ThrottleStatus *string `json:"throttleStatus,omitempty"`
}

// UsageCounterName - Definition of usage counter name.
type UsageCounterName struct {
	// Value - Gets or sets the usage counter name.
	Value *string `json:"value,omitempty"`
	// LocalizedValue - Gets or sets the localized usage counter name.
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// UsageListResult - The response model for the get usage operation.
type UsageListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets usage.
	Value []Usage `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ulr UsageListResult) Response() *http.Response {
	return ulr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ulr UsageListResult) StatusCode() int {
	return ulr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ulr UsageListResult) Status() string {
	return ulr.rawResponse.Status
}

// Variable - Definition of the varible.
type Variable struct {
	rawResponse *http.Response
	// ID - Gets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets the name of the variable.
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Properties - Gets or sets the properties of the variable.
	*VariableProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (v Variable) Response() *http.Response {
	return v.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (v Variable) StatusCode() int {
	return v.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (v Variable) Status() string {
	return v.rawResponse.Status
}

// VariableCreateOrUpdateParameters - The parameters supplied to the create or update variable operation.
type VariableCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the variable.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the variable.
	*VariableCreateOrUpdateProperties `json:"properties,omitempty"`
}

// VariableCreateOrUpdateProperties - The properties of the create variable operation.
type VariableCreateOrUpdateProperties struct {
	// Value - Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
	// Description - Gets or sets the description of the variable.
	Description *string `json:"description,omitempty"`
	// IsEncrypted - Gets or sets the encrypted flag of the variable.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
}

// VariableListResult - The response model for the list variables operation.
type VariableListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of variables.
	Value []Variable `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vlr VariableListResult) Response() *http.Response {
	return vlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vlr VariableListResult) StatusCode() int {
	return vlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vlr VariableListResult) Status() string {
	return vlr.rawResponse.Status
}

// VariableProperties - Definition of the varible properties
type VariableProperties struct {
	// Value - Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
	// IsEncrypted - Gets or sets the encrypted flag of the variable.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// VariableUpdateParameters - The parameters supplied to the update variable operation.
type VariableUpdateParameters struct {
	// Name - Gets or sets the name of the variable.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the value of the variable.
	*VariableUpdateProperties `json:"properties,omitempty"`
}

// VariableUpdateProperties - The properties of the update variable
type VariableUpdateProperties struct {
	// Value - Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
	// Description - Gets or sets the description of the variable.
	Description *string `json:"description,omitempty"`
}

// Webhook - Definition of the webhook type.
type Webhook struct {
	rawResponse *http.Response
	// ID - Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`
	// Name - Gets or sets the name of the webhook.
	Name *string `json:"name,omitempty"`
	// Properties - Gets or sets the webhook properties.
	*WebhookProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (w Webhook) Response() *http.Response {
	return w.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (w Webhook) StatusCode() int {
	return w.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (w Webhook) Status() string {
	return w.rawResponse.Status
}

// WebhookCreateOrUpdateParameters - The parameters supplied to the create or update webhook operation.
type WebhookCreateOrUpdateParameters struct {
	// Name - Gets or sets the name of the webhook.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the properties of the webhook.
	*WebhookCreateOrUpdateProperties `json:"properties,omitempty"`
}

// WebhookCreateOrUpdateProperties - The properties of the create webhook operation.
type WebhookCreateOrUpdateProperties struct {
	// IsEnabled - Gets or sets the value of the enabled flag of webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// URI - Gets or sets the uri.
	URI *string `json:"uri,omitempty"`
	// ExpiryTime - Gets or sets the expiry time.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
	// Runbook - Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`
	// RunOn - Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`
}

// WebhookListResult - The response model for the list webhook operation.
type WebhookListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of webhooks.
	Value []Webhook `json:"value,omitempty"`
	// NextLink - Gets or sets the next link.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wlr WebhookListResult) Response() *http.Response {
	return wlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wlr WebhookListResult) StatusCode() int {
	return wlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wlr WebhookListResult) Status() string {
	return wlr.rawResponse.Status
}

// WebhookProperties - Definition of the webhook properties
type WebhookProperties struct {
	// IsEnabled - Gets or sets the value of the enabled flag of the webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// URI - Gets or sets the webhook uri.
	URI *string `json:"uri,omitempty"`
	// ExpiryTime - Gets or sets the expiry time.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	// LastInvokedTime - Gets or sets the last invoked time.
	LastInvokedTime *time.Time `json:"lastInvokedTime,omitempty"`
	// Parameters - Gets or sets the parameters of the job that is created when the webhook calls the runbook it is associated with.
	Parameters map[string]string `json:"parameters,omitempty"`
	// Runbook - Gets or sets the runbook the webhook is associated with.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`
	// RunOn - Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`
	// CreationTime - Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Description - Gets or sets the description.
	Description *string `json:"description,omitempty"`
}

// WebhookUpdateParameters - The parameters supplied to the update webhook operation.
type WebhookUpdateParameters struct {
	// Name - Gets or sets the name of the webhook.
	Name string `json:"name,omitempty"`
	// Properties - Gets or sets the value of the webhook.
	*WebhookUpdateProperties `json:"properties,omitempty"`
}

// WebhookUpdateProperties - The properties of the update webhook.
type WebhookUpdateProperties struct {
	// IsEnabled - Gets or sets the value of the enabled flag of webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// RunOn - Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`
	// Parameters - Gets or sets the parameters of the job.
	Parameters map[string]string `json:"parameters,omitempty"`
	// Description - Gets or sets the description of the webhook.
	Description *string `json:"description,omitempty"`
}
